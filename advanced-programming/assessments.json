{"uid":"advanced-programming-assessment","name":"Advanced Programming Assessment","questions":[{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"advancedProgrammingAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"advancedProgrammingAssessments","changelog":[],"customInputVars":[],"difficulty":1,"hints":["\u003cp\u003e\n  The arguments passed to the function will be accessible in the form of a list\n  from the parameter \u003cspan\u003eargs\u003c/span\u003e.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  To combine the lists together create an empty list and loop through all of the\n  arguments (lists) stored in\n  \u003cspan\u003eargs\u003c/span\u003e, filtering each list using the \u003cspan\u003efilter\u003c/span\u003e function.\n  Once filtered you can extend the empty list with the contents of the filtered\n  list and continue.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  Once you've generated the combined list you can use the\n  \u003cspan\u003emap\u003c/span\u003e function to generate a new list of all of the squares of the\n  values. Remember that the data type returned by \u003cspan\u003emap\u003c/span\u003e is not a\n  list, therefore you'll need to convert what is returned from\n  \u003cspan\u003emap\u003c/span\u003e into a list before you can return it.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  When using the \u003cspan\u003emap\u003c/span\u003e and \u003cspan\u003efilter\u003c/span\u003e function you need to\n  pass a function to be applied to each element of what you're mapping or\n  filtering. You can create a function using the \u003cspan\u003edef\u003c/span\u003e keyword or you\n  can use a \u003cspan\u003elambda\u003c/span\u003e. A \u003cspan\u003elambda\u003c/span\u003e is a one line annonymous\n  function that looks like the following: \u003cspan\u003elambda x: x % 2 == 0\u003c/span\u003e.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Positive Even Squares","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a function that accepts any number of positional arguments, all of\n    which you may assume will be lists of integers. Your function should filter\n    all of these lists such that they only contain even positive integers and\n    combine all of the lists into one list of integers. Your function should\n    then modify the combined list such that it contains the squares of all of\n    the elements and return that list.\n  \u003c/p\u003e\n  \u003cp\u003e\n    Use a combination of the \u003cspan\u003emap\u003c/span\u003e, \u003cspan\u003efilter\u003c/span\u003e and\n    \u003cspan\u003elambda\u003c/span\u003e functions/keywords to modify the lists.\n  \u003c/p\u003e\n  \u003cp\u003eSee the sample input for an example.\u003c/p\u003e\n  \u003ch3\u003eSample Input #1\u003c/h3\u003e\n  \u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003e*args\u003c/span\u003e = [[-5, 2, 3, 4, 5], [1, 3, 5, 6, 7], [-9, -8, 10]]  \n\u003cspan class=\"CodeEditor-promptComment\"\u003e# arguments will be passed positionally to the function like this: \npositive_even_squares([-5, 2, 3, 4, 5], [1, 3, 5, 6, 7], [-9, -8, 10])\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #1\u003c/h3\u003e\n\u003cpre\u003e[4, 16, 36, 100] \u003cspan class=\"CodeEditor-promptComment\"\u003e# The combined list of positive even integers is: [2, 4, 6, 10], \nthe result is the squares of all of these values.\u003c/span\u003e\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        args = [[-5, 2, 3, 4, 5], [1, 3, 5, 6, 7], [-9, -8, 10]]\n        expected = [4, 16, 36, 100]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_2(self):\n        args = [[1], [2], [3], [4], [5]]\n        expected = [4, 16]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_3(self):\n        args = []\n        expected = []\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_4(self):\n        args = [[], [], []]\n        expected = []\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_5(self):\n        args = [[], [12], []]\n        expected = [144]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_6(self):\n        args = [[-1, 2, 4, 5], [1, 1, 1, 1, 2, 3], [4, 5], [1, 1], [-1, -4, -8, 0, 2], [2]]\n        expected = [4, 16, 4, 16, 4, 4]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_7(self):\n        args = [[-1, -2, -3, -4], [1, 2, 3, 4], [-4, -4, -5, -6], [2, 4], [10, 10, 10]]\n        expected = [4, 16, 4, 16, 100, 100, 100]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef positive_even_squares(*args):\n    positive_even_nums = []\n\n    for lst in args:\n        filtered_list = filter(lambda x: x \u003e 0 and x % 2 == 0, lst)\n        positive_even_nums.extend(filtered_list)\n\n    squares = map(lambda x: x ** 2, positive_even_nums)\n    return list(squares)\n"],"solutionsDisabled":false,"startingCode":"def positive_even_squares(*args):\n    # Write your code here.\n    pass\n","unitTests":"import unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        args = [[-5, 2, 3, 4, 5], [1, 3, 5, 6, 7], [-9, -8, 10]]\n        expected = [4, 16, 36, 100]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_2(self):\n        args = [[1], [2], [3], [4], [5]]\n        expected = [4, 16]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_3(self):\n        args = []\n        expected = []\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_4(self):\n        args = [[], [], []]\n        expected = []\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_5(self):\n        args = [[], [12], []]\n        expected = [144]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_6(self):\n        args = [[-1, 2, 4, 5], [1, 1, 1, 1, 2, 3], [4, 5], [1, 1], [-1, -4, -8, 0, 2], [2]]\n        expected = [4, 16, 4, 16, 4, 4]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_7(self):\n        args = [[-1, -2, -3, -4], [1, 2, 3, 4], [-4, -4, -5, -6], [2, 4], [10, 10, 10]]\n        expected = [4, 16, 4, 16, 100, 100, 100]\n        result = program.positive_even_squares(*args)\n        self.assertEqual(result, expected)\n"}},"spaceTime":"","submissionStatistics":{"correctCount":862,"failureCount":3577},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"53047096","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":5,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642920092"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Positive Even Squares","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"53047096"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"advancedProgrammingAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"advancedProgrammingAssessments","changelog":[],"customInputVars":[],"difficulty":1,"hints":["\u003cp\u003e\n  Think about the order in which you should use the decorators on\n  \u003cspan\u003einteger_sum\u003c/span\u003e.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  You should use the decorators in the order in which they are described in the\n  prompt.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  When creating a decorator your outer function needs to accept a single\n  argument, which is the decorated function. Your function must then define an\n  inner function that accepts in this case any number of positional arguments.\n  This inner function will need to filter the arguments as described in the\n  prompt and call the decorated function with the new arguments, storing and\n  returning the result from the function call. Lastly, the outer function must\n  return the inner function.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Integer Sum","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a function named \u003cspan\u003einteger_sum\u003c/span\u003e that accepts any number of\n    positional arguments, which are assumed to be integers. This function should \n    return the sum of all of these integers.\n  \u003c/p\u003e\n  \u003cp\u003e\n    To handle invalid input (arguments that are not integers) you must write the \n    following decorators and use them to decorate the \u003cspan\u003einteger_sum\u003c/span\u003e function.\n  \u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cspan\u003eflatten_lists\u003c/span\u003e: this decorator should \u003cem\u003eflatten\u003c/em\u003e any\n      \u003cspan\u003elist\u003c/span\u003e arguments for the decorated function by extracting their\n      elements and passing them as individual arguments instead of the list. For example,\n      if \u003cspan\u003e[1, 2, True]\u003c/span\u003e is an argument, then \u003cspan\u003e1\u003c/span\u003e,\n      \u003cspan\u003e2\u003c/span\u003e and \u003cspan\u003eTrue\u003c/span\u003e should be extracted and passed as\n      arguments instead of the \u003cspan\u003elist\u003c/span\u003e to the decorated function.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cspan\u003econvert_strings_to_ints\u003c/span\u003e: this decorator should convert any\n      string arguments that are valid integers to integers and pass them to the\n      decorated function. Any string that is not a valid integer should be\n      removed as an argument to the decorated function.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cspan\u003efilter_integers\u003c/span\u003e: this decorator should remove any argument\n      that is not an integer and call the decorated function with only integer\n      arguments.\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cp\u003e\n    You may assume all arguments passed to \u003cspan\u003einteger_sum\u003c/span\u003e will be of\n    type \u003cspan\u003efloat\u003c/span\u003e, \u003cspan\u003eint\u003c/span\u003e, \u003cspan\u003estr\u003c/span\u003e or\n    \u003cspan\u003elist\u003c/span\u003e.\n  \u003c/p\u003e\n  \u003ch3\u003eSample Input #1\u003c/h3\u003e\n\u003cpre\u003e\u003cspan class=\"CodeEditor-promptParameter\"\u003eargs\u003c/span\u003e = [\"1\", \"2\", -0.9, 4, [5, \"hi\", \"3\"]]  \n\u003cspan class=\"CodeEditor-promptComment\"\u003e# arguments will be passed positionally to the function like this: integer_sum(\"1\", \"2\", -0.9, 4, [5, \"hi\", \"3\"])\u003c/span\u003e\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #1\u003c/h3\u003e\n\u003cpre\u003e15\u003cspan class=\"CodeEditor-promptComment\"\u003e# the sum of \"1\", \"2\", 4, 5 and \"3\".\u003c/span\u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        args = [\"1\", \"2\", -0.9, 4, [5, \"hi\", \"3\"]]\n        expected = 15\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_2(self):\n        args = [2, 3, 4, -2, \"2\", [\"1\", \"2\", 3], 2.3]\n        expected = 15\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_3(self):\n        args = []\n        expected = 0\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_4(self):\n        args = [\"2.3\", \"true\", [1, \"hello\", 4]]\n        expected = 5\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_5(self):\n        args = [[1], [2], [\"3\", \"4\"], [1, 2]]\n        expected = 13\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_6(self):\n        args = [\"1\", \"2\", \"5\", \"6\", [\"1\", \"2\"]]\n        expected = 17\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_7(self):\n        args = [[1, [2]], [1, 2]]\n        expected = 4\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_8(self):\n        args = [\"5\", \"6\", \"2\", 4]\n        expected = 17\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_9(self):\n        args = []\n        expected = 0\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_10(self):\n        args = [2.4]\n        expected = 0\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef flatten_lists(func):\n    def wrapper(*args):\n        new_args = []\n        for arg in args:\n            if isinstance(arg, list):\n                new_args.extend(arg)\n            else:\n                new_args.append(arg)\n\n        result = func(*new_args)\n        return result\n\n    return wrapper\n\n\ndef convert_strings_to_ints(func):\n    def wrapper(*args):\n        new_args = []\n        for arg in args:\n            if isinstance(arg, str) and arg.isdigit():\n                new_args.append(int(arg))\n            else:\n                new_args.append(arg)\n\n        result = func(*new_args)\n        return result\n\n    return wrapper\n\n\ndef filter_integers(func):\n    def wrapper(*args):\n        new_args = []\n        for arg in args:\n            if isinstance(arg, int):\n                new_args.append(arg)\n\n        result = func(*new_args)\n        return result\n\n    return wrapper\n\n\n@flatten_lists\n@convert_strings_to_ints\n@filter_integers\ndef integer_sum(*args):\n    return sum(args)\n"],"solutionsDisabled":false,"startingCode":"def integer_sum(*args):\n    # Write your code here.\n    pass\n","unitTests":"import unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        args = [\"1\", \"2\", -0.9, 4, [5, \"hi\", \"3\"]]\n        expected = 15\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_2(self):\n        args = [2, 3, 4, -2, \"2\", [\"1\", \"2\", 3], 2.3]\n        expected = 15\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_3(self):\n        args = []\n        expected = 0\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_4(self):\n        args = [\"2.3\", \"true\", [1, \"hello\", 4]]\n        expected = 5\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_5(self):\n        args = [[1], [2], [\"3\", \"4\"], [1, 2]]\n        expected = 13\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_6(self):\n        args = [\"1\", \"2\", \"5\", \"6\", [\"1\", \"2\"]]\n        expected = 17\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_7(self):\n        args = [[1, [2]], [1, 2]]\n        expected = 4\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_8(self):\n        args = [\"5\", \"6\", \"2\", 4]\n        expected = 17\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_9(self):\n        args = []\n        expected = 0\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n\n    def test_case_10(self):\n        args = [2.4]\n        expected = 0\n        result = program.integer_sum(*args)\n        self.assertEqual(result, expected)\n"}},"spaceTime":"","submissionStatistics":{"correctCount":823,"failureCount":4425},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"9856990","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":10,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642920149"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Integer Sum","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"9856990"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"advancedProgrammingAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"advancedProgrammingAssessments","changelog":[],"customInputVars":[],"difficulty":1,"hints":["\u003cp\u003e\n  When creating the legacy, class based generator you need to implement the\n  \u003cspan\u003e__iter__\u003c/span\u003e and \u003cspan\u003e__next__\u003c/span\u003e method. The\n  \u003cspan\u003e__iter__\u003c/span\u003e method should initialize the iterator and define any\n  attributes necessary to maintain the state of the generator, it should also\n  return an iterator object, in this case it will likely be the object itself\n  (i.e. \u003cspan\u003ereturn self\u003c/span\u003e).\n\u003c/p\u003e\n","\n\u003cp\u003e\n  To create the functional iterator all you need to do is loop through all of\n  the characters in the string \u003cspan\u003efrequency\u003c/span\u003e times and\n  \u003cspan\u003eyield\u003c/span\u003e the appropriate characters.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  When implementing the \u003cspan\u003e__next__\u003c/span\u003e method on the legacy, class based\n  generator you'll need to increment and keep track of the current character in\n  the string to be returned. You will also need to keep track of how many times\n  you need to return the character until moving to the next. Remember to\n  \u003cspan\u003eraise StopIteration\u003c/span\u003e when there are no more characters left to\n  return.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Generate String","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a generator that accepts a string and an integer called\n    \u003cspan\u003efrequency\u003c/span\u003e and generates a sequence as follows:\n    \u003cspan\u003estring[0] * frequency + string[1] * frequency + ... + string[-2] * frequency + string[-1] * frequency\u003c/span\u003e. \n    Your generator should \u003cb\u003enot\u003c/b\u003e store this string, it should generate\n    the next element in the sequence each time its \u003cspan\u003enext\u003c/span\u003e method is\n    called.\n  \u003c/p\u003e\n  \u003cp\u003e\n    You should create this generator in both a functional and class based way.\n    Your functional generator should be named \u003cspan\u003egenerate_string\u003c/span\u003e and\n    your class based generator (a.k.a iterator) should be named\n    \u003cspan\u003eGenerateString\u003c/span\u003e.\n  \u003c/p\u003e\n  \u003cp\u003eYou may assume that \u003cspan\u003efrequency \u003e= 0\u003c/span\u003e.\u003c/p\u003e\n  \u003ch3\u003eSample Input #1\u003c/h3\u003e\n  \u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003estring\u003c/span\u003e = \"hello\"\n\u003cspan class=\"CodeEditor-promptParameter\"\u003efrequency\u003c/span\u003e = 3\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #1\u003c/h3\u003e\n\u003cpre\u003e\n\"hhheeellllllooo\" \u003cspan class=\"CodeEditor-promptComment\"\u003e# The sequence that should be generated by both generators\u003c/span\u003e\n\u003c/pre\u003e\n\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        string = \"hello\"\n        frequency = 3\n        expected = \"hhheeellllllooo\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_2(self):\n        string = \"tim\"\n        frequency = 5\n        expected = \"tttttiiiiimmmmm\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_3(self):\n        string = \"123\"\n        frequency = 4\n        expected = \"111122223333\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_4(self):\n        string = \"\"\n        frequency = 10\n        expected = \"\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_5(self):\n        string = \"string\"\n        frequency = 10\n        expected = \"ssssssssssttttttttttrrrrrrrrrriiiiiiiiiinnnnnnnnnngggggggggg\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_6(self):\n        string = \"Python\"\n        frequency = 13\n        expected = \"PPPPPPPPPPPPPyyyyyyyyyyyyyttttttttttttthhhhhhhhhhhhhooooooooooooonnnnnnnnnnnnn\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_7(self):\n        string = \" \"\n        frequency = 5\n        expected = \"     \"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_8(self):\n        string = \"large string\"\n        frequency = 3\n        expected = \"lllaaarrrgggeee   ssstttrrriiinnnggg\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef generate_string(string, frequency):\n    for char in string:\n        for _ in range(frequency):\n            yield char\n\n\nclass GenerateString:\n    def __init__(self, string, frequency):\n        self.string = string\n        self.frequency = frequency\n\n    def __iter__(self):\n        self.current_char_index = 0\n        self.char_counter = 0\n        return self\n\n    def __next__(self):\n        if self.char_counter \u003e= self.frequency:\n            self.char_counter = 0\n            self.current_char_index += 1\n\n        if self.current_char_index \u003e= len(self.string):\n            raise StopIteration\n\n        self.char_counter += 1\n        return self.string[self.current_char_index]\n"],"solutionsDisabled":false,"startingCode":"def generate_string(string, frequency):\n    # Write your code here.\n    pass\n\n\nclass GenerateString:\n    def __init__(self, string, frequency):\n        # Write your code here.\n        pass\n\n    # Write your code here.","unitTests":"import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        string = \"hello\"\n        frequency = 3\n        expected = \"hhheeellllllooo\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_2(self):\n        string = \"tim\"\n        frequency = 5\n        expected = \"tttttiiiiimmmmm\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_3(self):\n        string = \"123\"\n        frequency = 4\n        expected = \"111122223333\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_4(self):\n        string = \"\"\n        frequency = 10\n        expected = \"\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_5(self):\n        string = \"string\"\n        frequency = 10\n        expected = \"ssssssssssttttttttttrrrrrrrrrriiiiiiiiiinnnnnnnnnngggggggggg\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_6(self):\n        string = \"Python\"\n        frequency = 13\n        expected = \"PPPPPPPPPPPPPyyyyyyyyyyyyyttttttttttttthhhhhhhhhhhhhooooooooooooonnnnnnnnnnnnn\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_7(self):\n        string = \" \"\n        frequency = 5\n        expected = \"     \"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n\n    def test_case_8(self):\n        string = \"large string\"\n        frequency = 3\n        expected = \"lllaaarrrgggeee   ssstttrrriiinnnggg\"\n        function_result = program.generate_string(string, frequency)\n        class_result = program.GenerateString(string, frequency)\n        self.assertEqual(\"\".join(list(function_result)), expected)\n        self.assertEqual(\"\".join(list(class_result)), expected)\n"}},"spaceTime":"","submissionStatistics":{"correctCount":796,"failureCount":2208},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"63420020","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":10,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642920629"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Generate String","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"63420020"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"advancedProgrammingAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"advancedProgrammingAssessments","changelog":[],"customInputVars":[],"difficulty":1,"hints":["\u003cp\u003e\n  You can try storing the cumulative word count for each word in a dictionary\n  instance variable of \u003cspan\u003eWordCounter\u003c/span\u003e.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  The simplest way to solve this problem is by using a mutex (i.e. \u003cspan\u003ethreading.Lock()\u003c/span\u003e).\n\u003c/p\u003e\n","\n\u003cp\u003e\n  A threading lock is something you can use to control the execution of multiple\n  threads. You can use the \u003cspan\u003e.acquire()\u003c/span\u003e and\n  \u003cspan\u003e.release()\u003c/span\u003e methods to stop and start thread execution. When a\n  \u003cspan\u003e.acquire()\u003c/span\u003e method is reached in the program the current thread\n  must wait until the lock trying to be acquired is released.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Thread Safe Counter","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a \u003cspan\u003eWordCounter\u003c/span\u003e class that is meant to be able to count\n    words in large texts, so that a user of that class can quickly calculate how\n    many times a specific word occurs in a string.\n  \u003c/p\u003e\n  \u003cp\u003e\u003cspan\u003eWordCounter\u003c/span\u003e should implement the following methods:\u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cspan\u003eprocess_text(text)\u003c/span\u003e should take in a string,\n      \u003cspan\u003etext\u003c/span\u003e, and update the internal attributes of\n      \u003cspan\u003eWordCounter\u003c/span\u003e in a thread-safe manner. You may assume naively\n      that \u003cspan\u003etext.split(\" \")\u003c/span\u003e is good enough to return the list of\n      words in the passed \u003cspan\u003etext\u003c/span\u003e.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cspan\u003eget_word_count(word)\u003c/span\u003e should take in a string,\n      \u003cspan\u003eword\u003c/span\u003e, and check how many times that word has been seen in all\n      the texts that this \u003cspan\u003eWordCounter\u003c/span\u003e has processed. If this word\n      has never been seen, you should return \u003cspan\u003e0\u003c/span\u003e.\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cp\u003e\n    \u003cstrong\u003eNOTE\u003c/strong\u003e: This class must be thread-safe; meaning that many\n    threads should be able to use the \u003cspan\u003eWordCounter\u003c/span\u003e at the same time,\n    and the calculations must remain accurate as if only a single thread was\n    using the instance of \u003cspan\u003eWordCounter\u003c/span\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n    \u003cb\u003eNOTE\u003c/b\u003e: You may \u003cstrong\u003enot\u003c/strong\u003e use the \u003cspan\u003eCounter\u003c/span\u003e class\n    of the \u003cspan\u003ecollections\u003c/span\u003e standard library.\n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n\u003cpre class=\"line-numbers\"\u003e\u003ccode class=\"language-python\"\u003e\u003e\u003e\u003e wc = WordCounter()\n\u003e\u003e\u003e wc.process_text(\"the cat is in the bag\")\n\u003e\u003e\u003e wc.get_word_count(\"the\")\n2\n\u003e\u003e\u003e wc.get_word_count(\"bag\")\n1\n\u003e\u003e\u003e wc.get_word_count(\"dog\")\n0\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport unittest\nimport threading\n\nfrom program import WordCounter\n\n\nTEST_TEXT_1 = \"\"\"\nThe Ares Program. Mankind reaching out to Mars to send people \nto another planet for the very first time and expand the horizons \nof humanity blah, blah, blah. The Ares 1 crew did their thing and \ncame back heroes. They got the parades and fame and love of the world.\n\nAres 2 did the same thing, in a different location on Mars. They got \na firm handshake and a hot cup of coffee when they got home.\n\nAres 3. Well, that was my mission. Okay, not mine per se. Commander \nLewis was in charge. I was just one of her crew. Actually, I was the \nvery lowest ranked member of the crew. I would only be âin commandâ of \nthe mission if I were the only remaining person.\n\"\"\".strip()\n\nTEST_TEXT_2 = \" \".join([\"dog\"] * 50000)\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        wc = WordCounter()\n        wc.process_text(\"the cat is in the bag\")\n        self.assertEqual(2, wc.get_word_count(\"the\"))\n        self.assertEqual(1, wc.get_word_count(\"bag\"))\n        self.assertEqual(0, wc.get_word_count(\"dog\"))\n\n    def test_case_2(self):\n        wc = WordCounter()\n        wc.process_text(TEST_TEXT_1)\n        self.assertEqual(8, wc.get_word_count(\"the\"))\n        self.assertEqual(4, wc.get_word_count(\"I\"))\n        self.assertEqual(5, wc.get_word_count(\"and\"))\n\n    def test_case_3(self):\n        wc = WordCounter()\n\n        threads = []\n        for _ in range(10):\n            thread = threading.Thread(target=wc.process_text, args=(TEST_TEXT_1,))\n            threads.append(thread)\n\n        for thread in threads:\n            thread.start()\n\n        for thread in threads:\n            thread.join()\n\n        self.assertEqual(80, wc.get_word_count(\"the\"))\n        self.assertEqual(40, wc.get_word_count(\"I\"))\n        self.assertEqual(50, wc.get_word_count(\"and\"))\n\n    def test_case_4(self):\n        wc = WordCounter()\n\n        threads = []\n        for _ in range(4):\n            thread = threading.Thread(target=wc.process_text, args=(TEST_TEXT_2,))\n            threads.append(thread)\n\n        for thread in threads:\n            thread.start()\n\n        for thread in threads:\n            thread.join()\n\n        self.assertEqual(4 * 50000, wc.get_word_count(\"dog\"))\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\nimport threading\n\n\nclass WordCounter:\n    def __init__(self):\n        self.lock = threading.Lock()\n        self.word_counts = {}\n\n    def process_text(self, text):\n        words = text.split(\" \")\n        for word in words:\n            self._increment_word_count(word)\n\n    def get_word_count(self, word):\n        self.lock.acquire()\n        count = self.word_counts.get(word, 0)\n        self.lock.release()\n        return count\n\n    def _increment_word_count(self, word):\n        self.lock.acquire()\n        self.word_counts[word] = self.word_counts.get(word, 0) + 1\n        self.lock.release()\n","# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\nimport threading\n\n\nclass WordCounter:\n    def __init__(self):\n        self.lock = threading.Lock()\n        self.word_counts = {}\n\n    def process_text(self, text):\n        words = text.split(\" \")\n        temporary_word_counts = {}\n        for word in words:\n            if word not in temporary_word_counts:\n                temporary_word_counts[word] = 0\n            temporary_word_counts[word] += 1\n        self._increase_word_counts(temporary_word_counts)\n\n    def get_word_count(self, word):\n        self.lock.acquire()\n        count = self.word_counts.get(word, 0)\n        self.lock.release()\n        return count\n\n    def _increase_word_counts(self, word_counts):\n        self.lock.acquire()\n        for word in word_counts:\n            self.word_counts[word] = self.word_counts.get(word, 0) + word_counts[word]\n        self.lock.release()\n"],"solutionsDisabled":false,"startingCode":"class WordCounter:\n    def __init__(self):\n        # Write your code here.\n        pass\n\n    # Write your code here.\n","unitTests":"import unittest\nimport threading\n\nfrom program import WordCounter\n\n\nTEST_TEXT_1 = \"\"\"\nThe Ares Program. Mankind reaching out to Mars to send people \nto another planet for the very first time and expand the horizons \nof humanity blah, blah, blah. The Ares 1 crew did their thing and \ncame back heroes. They got the parades and fame and love of the world.\n\nAres 2 did the same thing, in a different location on Mars. They got \na firm handshake and a hot cup of coffee when they got home.\n\nAres 3. Well, that was my mission. Okay, not mine per se. Commander \nLewis was in charge. I was just one of her crew. Actually, I was the \nvery lowest ranked member of the crew. I would only be âin commandâ of \nthe mission if I were the only remaining person.\n\"\"\".strip()\n\nTEST_TEXT_2 = \" \".join([\"dog\"] * 50000)\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        wc = WordCounter()\n        wc.process_text(\"the cat is in the bag\")\n        self.assertEqual(2, wc.get_word_count(\"the\"))\n        self.assertEqual(1, wc.get_word_count(\"bag\"))\n        self.assertEqual(0, wc.get_word_count(\"dog\"))\n\n    def test_case_2(self):\n        wc = WordCounter()\n        wc.process_text(TEST_TEXT_1)\n        self.assertEqual(8, wc.get_word_count(\"the\"))\n        self.assertEqual(4, wc.get_word_count(\"I\"))\n        self.assertEqual(5, wc.get_word_count(\"and\"))\n\n    def test_case_3(self):\n        wc = WordCounter()\n\n        threads = []\n        for _ in range(10):\n            thread = threading.Thread(target=wc.process_text, args=(TEST_TEXT_1,))\n            threads.append(thread)\n\n        for thread in threads:\n            thread.start()\n\n        for thread in threads:\n            thread.join()\n\n        self.assertEqual(80, wc.get_word_count(\"the\"))\n        self.assertEqual(40, wc.get_word_count(\"I\"))\n        self.assertEqual(50, wc.get_word_count(\"and\"))\n\n    def test_case_4(self):\n        wc = WordCounter()\n\n        threads = []\n        for _ in range(4):\n            thread = threading.Thread(target=wc.process_text, args=(TEST_TEXT_2,))\n            threads.append(thread)\n\n        for thread in threads:\n            thread.start()\n\n        for thread in threads:\n            thread.join()\n\n        self.assertEqual(4 * 50000, wc.get_word_count(\"dog\"))\n"}},"spaceTime":"","submissionStatistics":{"correctCount":766,"failureCount":1809},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"51532435","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":14,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"643655982"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Thread Safe Counter","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"51532435"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"advancedProgrammingAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"advancedProgrammingAssessments","changelog":[],"customInputVars":[],"difficulty":1,"hints":["\u003cp\u003e\n  You can try storing the cumulative word count for each word in a dictionary\n  instance variable of \u003cspan\u003eWordCounter\u003c/span\u003e.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  The simplest way to solve this problem is by using a mutex (i.e. \u003cspan\u003ethreading.Lock()\u003c/span\u003e).\n\u003c/p\u003e\n","\n\u003cp\u003e\n  A threading lock is something you can use to control the execution of multiple\n  threads. You can use the \u003cspan\u003e.acquire()\u003c/span\u003e and\n  \u003cspan\u003e.release()\u003c/span\u003e methods to stop and start thread execution. When a\n  \u003cspan\u003e.acquire()\u003c/span\u003e method is reached in the program the current thread\n  must wait until the lock trying to be acquired is released.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Asynchronous Fetcher","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a \u003cspan\u003eBatchFetcher\u003c/span\u003e class that is meant to fetch lots of\n    records from a database\n    very quickly.\n  \u003c/p\u003e\n  \u003cp\u003e\n    Your constructor takes in a \u003cspan\u003edatabase\u003c/span\u003e object that has an\n    \u003cspan\u003easync\u003c/span\u003e method called\n    \u003cspan\u003easync_fetch\u003c/span\u003e. This method takes a record identifier (or\n    \u003cspan\u003erecord_id\u003c/span\u003e) and\n    returns whatever the database has in storage for that record.\n  \u003c/p\u003e\n  \u003cp\u003e\n    \u003cspan\u003eBatchFetcher\u003c/span\u003e should implement the async method\n    \u003cspan\u003efetch_records\u003c/span\u003e, which takes in\n    a list, \u003cspan\u003erecord_ids\u003c/span\u003e, and should return the list of records\n    corresponding to those\n    \u003cspan\u003erecord_ids\u003c/span\u003e.\n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\u003e\u003ccode class=\"language-python\"\u003e\u003e\u003e\u003e fetcher = BatchFetcher(database)\n\u003e\u003e\u003e fetcher.fetch_records([\"A\", \"B\", \"C\"])\n[{\"data\": \"data of record A\"}, {\"data\": \"data of record B\"}, {\"data\": \"data of record C\"}]\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport asyncio\nimport time\nimport unittest\nimport random\nimport threading\n\nfrom program import BatchFetcher\n\n\nclass MockDatabase(object):\n    def __init__(self, records):\n        self.records = records\n\n    async def async_fetch(self, record_id):\n        # A real database would take time to contact and fetch records from,\n        # so we simulate that time by sleeping in here.\n        await asyncio.sleep(0.1)\n        return self.records.get(record_id)\n\n\ndef async_test(f):\n    \"\"\"\n    This decorator allows the running of a test case that is async by definition, and always\n    waiting for its completion before moving onto another test case.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        coroutine = asyncio.coroutine(f)\n        future = coroutine(*args, **kwargs)\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(future)\n\n    return wrapper\n\n\nclass TestProgram(unittest.TestCase):\n    @async_test\n    async def test_case_1(self):\n        records = {\n            \"a\": {\"data\": 42},\n        }\n        db = MockDatabase(records)\n        fetcher = BatchFetcher(db)\n        results = await fetcher.fetch_records([\"a\"])\n        self.assertEqual(1, len(results))\n        self.assertEqual({\"data\": 42}, results[0])\n\n    @async_test\n    async def test_case_2(self):\n        keys = [f\"{i}\" for i in range(20)]\n        records = {k: {\"data\": random.randint(1, 100)} for k in keys}\n        db = MockDatabase(records)\n        fetcher = BatchFetcher(db)\n\n        start_time = time.time()\n        results = await fetcher.fetch_records(keys)\n        total_time = time.time() - start_time\n\n        self.assertEqual(20, len(results))\n        self.assertTrue(\n            total_time \u003c 0.5, \"Batch fetching should happen concurrently using asyncio. Your code took too long to run!\"\n        )\n        for (i, k) in enumerate(keys):\n            self.assertEqual(records[k], results[i])\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\nimport asyncio\n\n\nclass BatchFetcher:\n    def __init__(self, database):\n        self.database = database\n\n    async def fetch_records(self, record_ids):\n        pending_records = []\n        for record_id in record_ids:\n            pending_records.append(self.database.async_fetch(record_id))\n\n        return await asyncio.gather(*pending_records)\n","# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\nimport asyncio\n\n\nclass BatchFetcher:\n    def __init__(self, database):\n        self.database = database\n\n    async def fetch_records(self, record_ids):\n        pending_records = []\n        for record_id in record_ids:\n            task = asyncio.create_task(self.database.async_fetch(record_id))\n            pending_records.append(task)\n\n        records = []\n        for pending_record in pending_records:\n            records.append(await pending_record)\n        return records\n"],"solutionsDisabled":false,"startingCode":"class BatchFetcher:\n    # The `database` has an `async_fetch` method\n    # that you should use in your code. This method\n    # takes in a record id and returns a record.\n    def __init__(self, database):\n        # Write your code here.\n        pass\n\n    # Write your code here.\n","unitTests":"import asyncio\nimport time\nimport unittest\nimport random\nimport threading\n\nfrom program import BatchFetcher\n\n\nclass MockDatabase(object):\n    def __init__(self, records):\n        self.records = records\n\n    async def async_fetch(self, record_id):\n        # A real database would take time to contact and fetch records from,\n        # so we simulate that time by sleeping in here.\n        await asyncio.sleep(0.1)\n        return self.records.get(record_id)\n\n\ndef async_test(f):\n    \"\"\"\n    This decorator allows the running of a test case that is async by definition, and always\n    waiting for its completion before moving onto another test case.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        coroutine = asyncio.coroutine(f)\n        future = coroutine(*args, **kwargs)\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(future)\n\n    return wrapper\n\n\nclass TestProgram(unittest.TestCase):\n    @async_test\n    async def test_case_1(self):\n        records = {\n            \"a\": {\"data\": 42},\n        }\n        db = MockDatabase(records)\n        fetcher = BatchFetcher(db)\n        results = await fetcher.fetch_records([\"a\"])\n        self.assertEqual(1, len(results))\n        self.assertEqual({\"data\": 42}, results[0])\n\n    @async_test\n    async def test_case_2(self):\n        keys = [f\"{i}\" for i in range(20)]\n        records = {k: {\"data\": random.randint(1, 100)} for k in keys}\n        db = MockDatabase(records)\n        fetcher = BatchFetcher(db)\n\n        start_time = time.time()\n        results = await fetcher.fetch_records(keys)\n        total_time = time.time() - start_time\n\n        self.assertEqual(20, len(results))\n        self.assertTrue(\n            total_time \u003c 0.5, \"Batch fetching should happen concurrently using asyncio. Your code took too long to run!\"\n        )\n        for (i, k) in enumerate(keys):\n            self.assertEqual(records[k], results[i])\n"}},"spaceTime":"","submissionStatistics":{"correctCount":766,"failureCount":2371},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"52532435","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":10,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"643662604"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Asynchronous Fetcher","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"52532435"}]}
