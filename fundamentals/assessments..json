{"uid":"programming-fundamentals-assessment","name":"Programming Fundamentals Assessment","questions":[{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"","changelog":[],"customInputVars":[{"example":"1\n3\n2","name":"stdin","schema":{"type":"string"}}],"difficulty":0,"hints":["\u003cp\u003e\n  Start by thinking about all of the different invalid input your program could\n  be given. How will you handle this?\n\u003c/p\u003e\n","\n\u003cp\u003e\n  The first thing you'll need to do after each value is inputted is determine if\n  it is an integer. Do you remember the string method you can use to do this?\n\u003c/p\u003e\n","\n\u003cp\u003e\n  After validating that all your inputs are integers and that the end of the\n  range is after the start of the range you'll need to generate the random\n  number. To do this you can use the\n  \u003cspan\u003erandom.randint(start, end)\u003c/span\u003e method.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  After generating the random number you'll need to use a\n  \u003cspan\u003ewhile\u003c/span\u003e loop to continue to ask the user to guess a number until\n  they guess the random number.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[{"stdin":"1\n3\n2"},{"stdin":"1\n2\n2\n1"},{"stdin":"hello\n5\n1\n6\n5"},{"stdin":"2\n5\nhey\nhello\n2\n4\n3"},{"stdin":"1\n30\n1\n4\n3\n20\n30\n12"}],"languagesSupported":["python"],"name":"Random Number Guesser","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a program that asks the user to enter two integers representing the\n    start and the end of a range. The program should then generate a random\n    number within this range (inclusively) and ask the user to guess numbers\n    until they guess the randomly generated number. Once the user guesses the\n    random number, the program should tell them how many attempts it took them\n    to guess it.\n  \u003c/p\u003e\n  \u003cp\u003e\n    Your program needs to ensure that the range of numbers given is valid. For\n    example, if the user enters a number for the end of the range that is less\n    than the start of the range your program needs ask them to enter a valid\n    number. Your program must also handle any other errors that might occur,\n    like the user entering a string instead of an integer.\n  \u003c/p\u003e\n  \u003cp\u003e\n    Note: You may assume the start of the range will never be negative (i.e. you\n    don't need to handle negative values).\n  \u003c/p\u003e\n  \u003cp\u003e\n    Your program must use the same prompts and output as shown in the sample\n    output below.\n  \u003c/p\u003e\n  \u003ch3\u003eSample Output 1\u003c/h3\u003e\n\u003cpre\u003eEnter the start of the range: 1\nEnter the end of the range: 5\nGuess a number: 2\nGuess a number: 3\nYou guessed the number in 2 attempts\u003c/pre\u003e\n  \u003ch3\u003eSample Output 2\u003c/h3\u003e\n\u003cpre\u003eEnter the start of the range: 5\nEnter the end of the range: 4\nPlease enter a valid number.\nEnter the end of the range: 7\nGuess a number: 6\nYou guessed the number in 1 attempt\u003c/pre\u003e\n  \u003ch3\u003eSample Output 3\u003c/h3\u003e\n\u003cpre\u003eEnter the start of the range: hello\nPlease enter a valid number.\nEnter the start of the range: 8\nEnter the end of the range: 4\nPlease enter a valid number.\nEnter the end of the range: 20\nGuess a number: 6\nGuess a number: 7\nGuess a number: hello\nPlease enter a valid number.\nGuess a number: 9\nYou guessed the number in 3 attempts\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"2021-05-24T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\nimport random\n\nstart = input('Enter the start of the range: ')\nwhile not start.isdigit():\n    print('Please enter a valid number.')\n    start = input('Enter the start of the range: ')\n\nend = input('Enter the end of the range: ')\nwhile not end.isdigit() or int(end) \u003c int(start):\n    print('Please enter a valid number.')\n    end = input('Enter the end of the range: ')\n\nrandom_number = random.randint(int(start), int(end))\n\nguess = None\nattempts = 0\n\nwhile guess != random_number:\n    guessed_number = input(\"Guess a number: \")\n    if not guessed_number.isdigit():\n        print(\"Please enter a valid number.\")\n        continue\n    \n    attempts += 1\n    guess = int(guessed_number)\n\nsuffix = \"\"\nif attempts \u003e 1:\n    suffix = \"s\"\n\nprint(f'You guessed the number in {attempts} attempt{suffix}')\n"],"solutionsDisabled":false,"startingCode":"import random\n\n# Write your code here.\n# Make sure to use `random.randint` to pick your random number.\n","unitTests":""}},"spaceTime":"","submissionStatistics":{"correctCount":2435,"failureCount":32139},"testStrategy":"STDIN","tests":[{"stdin":"1\n3\n2"},{"stdin":"1\n2\n2\n1"},{"stdin":"hello\n5\n1\n6\n5"},{"stdin":"2\n5\nhey\nhello\n2\n4\n3"},{"stdin":"1\n30\n1\n4\n3\n20\n30\n12"}],"uid":"70970105","version":0,"video":{"annotations":[],"codeWalkthroughTime":263,"duration":10,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642397961"},"visualization":{"inputType":null,"outputType":null}},"difficulty":0,"instructor":"Tim Ruscica","name":"Random Number Guesser","releaseDate":"2021-05-24T00:00:00Z","type":"CODING_STANDARD","uid":"70970105"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"Programming Fundamentals Assessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"Programming Fundamentals Assessments","changelog":[],"customInputVars":[],"difficulty":1,"hints":["\u003cp\u003e\n  Start by creating a list of all of the characters in the alphabet, in order.\n  Does this make it easier to determine how to shift positions?\n\u003c/p\u003e\n","\n\u003cp\u003e\n  Determine the position (index) of each character in the alphabet list you\n  created. Once you know this how can you determine what the shifted/encoded\n  character should be?\n\u003c/p\u003e\n","\n\u003cp\u003e\n  Loop through the input string and use the \u003cspan\u003e.find()\u003c/span\u003e or\n  \u003cspan\u003e.index()\u003c/span\u003e method to determine the index of the current character\n  in the input string. Then subtract the \u003cspan\u003eoffset\u003c/span\u003e from the that index\n  to determine the index of the character you should add to the encoded string.\n  There is no need to handle negative indexes as python lists support negative\n  indexing. For example, shifting \u003cspan\u003e\"a\"\u003c/span\u003e which has index\n  \u003cspan\u003e0\u003c/span\u003e by two results in \u003cspan\u003e-2\u003c/span\u003e which is the second last\n  index in the alphabet list \u003cspan\u003e\"y\"\u003c/span\u003e.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Caesar Cipher","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Write a function that accepts a string and returns the caesar cipher encoding\n  of that string according to a secondary input parameter named\n  \u003cspan\u003eoffset\u003c/span\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  The caesar cipher encoding of a string involves shifting each character in the\n  string a set number of positions previous in the alphabet. For example, if you\n  were performing a caesar cipher of the string \u003cspan\u003e\"tim\"\u003c/span\u003e with\n  \u003cspan\u003eoffset = 2\u003c/span\u003e you would get \u003cspan\u003e\"rgk\"\u003c/span\u003e. \u003cspan\u003e\"t\"\u003c/span\u003e is\n  shifted two positions to \u003cspan\u003e\"r\"\u003c/span\u003e, \u003cspan\u003e\"i\"\u003c/span\u003e is shifted two\n  positions to \u003cspan\u003e\"g\"\u003c/span\u003e and \u003cspan\u003e\"m\"\u003c/span\u003e is shifted two positions to\n  \u003cspan\u003e\"k\"\u003c/span\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  In the situation where the shift of a character results in it being a position\n  before \u003cspan\u003e\"a\"\u003c/span\u003e the positions wrap and the next character should be\n  \u003cspan\u003e\"z\"\u003c/span\u003e. For example, the caesar cipher of \u003cspan\u003e\"ab\"\u003c/span\u003e with\n  \u003cspan\u003eoffset = 2\u003c/span\u003e would be \u003cspan\u003e\"yz\"\u003c/span\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  \u003cspan\u003eoffset\u003c/span\u003e will always be a positive integer that is no greater than\n  \u003cspan\u003e26\u003c/span\u003e and the input string will only contain lowercase letters.\n\u003c/p\u003e\n\u003ch3\u003eSample Input #1\u003c/h3\u003e\n\u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003estring\u003c/span\u003e = \"hello\"\n\u003cspan class=\"CodeEditor-promptParameter\"\u003eoffset\u003c/span\u003e = 3\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #1\u003c/h3\u003e\n\u003cpre\u003e\"ebiil\"\u003c/pre\u003e\n\u003ch3\u003eSample Input #2\u003c/h3\u003e\n\u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003estring\u003c/span\u003e = \"apple\"\n\u003cspan class=\"CodeEditor-promptParameter\"\u003eoffset\u003c/span\u003e = 5\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #2\u003c/h3\u003e\n\u003cpre\u003e\"vkkgz\"\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        string = \"hello\"\n        offset = 3\n        expected = \"ebiil\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_2(self):\n        string = \"apple\"\n        offset = 0\n        expected = \"apple\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_3(self):\n        string = \"abc\"\n        offset = 20\n        expected = \"ghi\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_4(self):\n        string = \"\"\n        offset = 3\n        expected = \"\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_5(self):\n        string = \"a\"\n        offset = 26\n        expected = \"a\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_6(self):\n        string = \"hagshsah\"\n        offset = 8\n        expected = \"zsykzksz\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef caesar_cipher(string, offset):\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\n                'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n    encoded_string = ''\n\n    for character in string:\n        position = alphabet.index(character)\n        offset_position = position - offset\n        # No need to handle negative positions because of negative indexing\n        encoded_character = alphabet[offset_position]\n        encoded_string += encoded_character\n\n    return encoded_string\n"],"solutionsDisabled":false,"startingCode":"def caesar_cipher(string, offset):\n    # Write your code here.\n    pass\n","unitTests":"import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        string = \"hello\"\n        offset = 3\n        expected = \"ebiil\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_2(self):\n        string = \"apple\"\n        offset = 0\n        expected = \"apple\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_3(self):\n        string = \"abc\"\n        offset = 20\n        expected = \"ghi\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_4(self):\n        string = \"\"\n        offset = 3\n        expected = \"\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_5(self):\n        string = \"a\"\n        offset = 26\n        expected = \"a\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n\n    def test_case_6(self):\n        string = \"hagshsah\"\n        offset = 8\n        expected = \"zsykzksz\"\n        result = program.caesar_cipher(string, offset)\n        self.assertEqual(expected, result)\n"}},"spaceTime":"","submissionStatistics":{"correctCount":2310,"failureCount":11272},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"26124210","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":6,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642399296"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Caesar Cipher","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"26124210"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"ProgrammingFundamentalsAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"ProgrammingFundamentalsAssessments","changelog":[],"customInputVars":[{"example":null,"name":"employees","schema":{"items":{"items":[{"type":"string"},{"type":"integer"},{"type":"integer"}],"type":"array"},"type":"array"}},{"example":null,"name":"sort_by","schema":{"type":"string"}}],"difficulty":1,"hints":["\u003cp\u003e\n  If you have completed the lesson on \u003cspan\u003elambda\u003c/span\u003e's you can try using a\n  buil-in Python sorting function. Otherwise you'll need to write your own\n  sorting algorithm.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  If you're writing your own sorting algorithm you'll need to determine the\n  index of the item in the employee lists you want to sort by. The simplest way\n  to sort after that is to select the employees, one at a time, that have the\n  smallest value at the desired index and insert them into a new list while\n  deleting them from the employees list so they don't get added multiple times.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  Use a \u003cspan\u003ewhile\u003c/span\u003e loop to loop through all of the employees until there\n  are none left. At each \u003cspan\u003ewhile\u003c/span\u003e loop iteration loop through all of\n  the employees again (using a \u003cspan\u003efor\u003c/span\u003e loop) and determine the index of\n  the employee that has the smallest value in the sorting index. Add this\n  employee to the sorted list and remove it from the employees list. At each\n  iteration of the \u003cspan\u003ewhile\u003c/span\u003e loop one employee should be added to the\n  sorted list and removed from the employee list. Eventually all employees will\n  have been removed from the employees list and added to the sorted list.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Sort Employees","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Write a function that accepts a list of lists that contain the name, age and\n  salary of specific employees and also accepts a string representing the key to\n  sort employees by. Your function should return a new list that contains the\n  lists representing each employee sorted in ascending order by the given key.\n\u003c/p\u003e\n\u003cp\u003e\n  The string parameter named \u003cspan\u003esort_by\u003c/span\u003e will always be equal to one of\n  the following values: \u003cspan\u003e\"name\"\u003c/span\u003e, \u003cspan\u003e\"age\"\u003c/span\u003e or\n  \u003cspan\u003e\"salary\"\u003c/span\u003e.\n\u003c/p\u003e\n\u003cp\u003eSee the sample input and output below for a detailed example.\u003c/p\u003e\n\u003ch3\u003eSample Input #1\u003c/h3\u003e\n\u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003eemployees\u003c/span\u003e = \n[\n  [\"John\", 33, 65000],\n  [\"Sarah\", 24, 75000],\n  [\"Josie\", 29, 100000],\n  [\"Jason\", 26, 55000],\n  [\"Connor\", 25, 110000]\n]\n\u003cspan class=\"CodeEditor-promptParameter\"\u003esort_by\u003c/span\u003e = \"age\"\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #1\u003c/h3\u003e\n\u003cpre\u003e\n[\n  [\"Sarah\", 24, 75000],\n  [\"Connor\", 25, 110000],\n  [\"Jason\", 26, 55000],\n  [\"Josie\", 29, 100000],\n  [\"John\", 33, 65000]\n]\n\u003c/pre\u003e\n\u003ch3\u003eSample Input #2\u003c/h3\u003e\n\u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003eemployees\u003c/span\u003e = \n[\n  [\"John\", 33, 65000],\n  [\"Sarah\", 24, 75000],\n  [\"Josie\", 29, 100000],\n  [\"Jason\", 26, 55000],\n  [\"Connor\", 25, 110000]\n]\n\u003cspan class=\"CodeEditor-promptParameter\"\u003esort_by\u003c/span\u003e = \"salary\"\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #2\u003c/h3\u003e\n\u003cpre\u003e\n[\n  [\"Jason\", 26, 55000],\n  [\"John\", 33, 65000],\n  [\"Sarah\", 24, 75000],\n  [\"Josie\", 29, 100000],\n  [\"Connor\", 25, 110000]\n]\n\u003c/pre\u003e\n\u003ch3\u003eSample Input #3\u003c/h3\u003e\n\u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003eemployees\u003c/span\u003e = \n[\n  [\"John\", 33, 65000],\n  [\"Sarah\", 24, 75000],\n  [\"Josie\", 29, 100000],\n  [\"Jason\", 26, 55000],\n  [\"Connor\", 25, 110000]\n]\n\u003cspan class=\"CodeEditor-promptParameter\"\u003esort_by\u003c/span\u003e = \"name\"\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #3\u003c/h3\u003e\n\u003cpre\u003e\n[\n  [\"Connor\", 25, 110000],\n  [\"Jason\", 26, 55000],\n  [\"John\", 33, 65000],\n  [\"Josie\", 29, 100000],\n  [\"Sarah\", 24, 75000]\n]\n\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        employees = [\n            [\"John\", 33, 65000],\n            [\"Sarah\", 24, 75000],\n            [\"Josie\", 29, 100000],\n            [\"Jason\", 26, 55000],\n            [\"Connor\", 25, 110000],\n        ]\n        sort_by = \"age\"\n        expected = [\n            [\"Sarah\", 24, 75000],\n            [\"Connor\", 25, 110000],\n            [\"Jason\", 26, 55000],\n            [\"Josie\", 29, 100000],\n            [\"John\", 33, 65000],\n        ]\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_2(self):\n        employees = [\n            [\"John\", 33, 65000],\n            [\"Sarah\", 24, 75000],\n            [\"Josie\", 29, 100000],\n            [\"Jason\", 26, 55000],\n            [\"Connor\", 25, 110000],\n        ]\n        sort_by = \"salary\"\n        expected = [\n            [\"Jason\", 26, 55000],\n            [\"John\", 33, 65000],\n            [\"Sarah\", 24, 75000],\n            [\"Josie\", 29, 100000],\n            [\"Connor\", 25, 110000],\n        ]\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_3(self):\n        employees = [\n            [\"John\", 33, 65000],\n            [\"Sarah\", 24, 75000],\n            [\"Josie\", 29, 100000],\n            [\"Jason\", 26, 55000],\n            [\"Connor\", 25, 110000],\n        ]\n        sort_by = \"name\"\n        expected = [\n            [\"Connor\", 25, 110000],\n            [\"Jason\", 26, 55000],\n            [\"John\", 33, 65000],\n            [\"Josie\", 29, 100000],\n            [\"Sarah\", 24, 75000],\n        ]\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_4(self):\n        employees = []\n        sort_by = \"salary\"\n        expected = []\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_5(self):\n        employees = []\n        sort_by = \"name\"\n        expected = []\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_6(self):\n        employees = []\n        sort_by = \"age\"\n        expected = []\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef sort_employees(employees, sort_by):\n    sort_indices = [\"name\", \"age\", \"salary\"]\n    sort_index = sort_indices.index(sort_by)\n\n    sorted_employees = []\n    # Copy the employees list so we don't modify it\n    employees_copy = employees[:]\n\n    while len(employees_copy) \u003e 0:\n        smallest_employee_index = 0\n\n        for i, employee in enumerate(employees_copy):\n            current_smallest_value = employees_copy[smallest_employee_index][sort_index]\n            if employee[sort_index] \u003c current_smallest_value:\n                smallest_employee_index = i\n\n        # After looking through all remaining employees we will have found the employee\n        # with the smallest sort_by value so we add it to the sorted list\n        next_sorted_employee = employees_copy[smallest_employee_index]\n        sorted_employees.append(next_sorted_employee)\n        employees_copy.pop(smallest_employee_index)\n\n    return sorted_employees\n","# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef sort_employees(employees, sort_by):\n    sort_indices = [\"name\", \"age\", \"salary\"]\n    sort_index = sort_indices.index(sort_by)\n\n    sorted_employees = sorted(employees, key=lambda x: x[sort_index])\n\n    return sorted_employees\n"],"solutionsDisabled":false,"startingCode":"def sort_employees(employees, sort_by):\n    # Write your code here.\n    pass\n","unitTests":"import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        employees = [\n            [\"John\", 33, 65000],\n            [\"Sarah\", 24, 75000],\n            [\"Josie\", 29, 100000],\n            [\"Jason\", 26, 55000],\n            [\"Connor\", 25, 110000],\n        ]\n        sort_by = \"age\"\n        expected = [\n            [\"Sarah\", 24, 75000],\n            [\"Connor\", 25, 110000],\n            [\"Jason\", 26, 55000],\n            [\"Josie\", 29, 100000],\n            [\"John\", 33, 65000],\n        ]\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_2(self):\n        employees = [\n            [\"John\", 33, 65000],\n            [\"Sarah\", 24, 75000],\n            [\"Josie\", 29, 100000],\n            [\"Jason\", 26, 55000],\n            [\"Connor\", 25, 110000],\n        ]\n        sort_by = \"salary\"\n        expected = [\n            [\"Jason\", 26, 55000],\n            [\"John\", 33, 65000],\n            [\"Sarah\", 24, 75000],\n            [\"Josie\", 29, 100000],\n            [\"Connor\", 25, 110000],\n        ]\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_3(self):\n        employees = [\n            [\"John\", 33, 65000],\n            [\"Sarah\", 24, 75000],\n            [\"Josie\", 29, 100000],\n            [\"Jason\", 26, 55000],\n            [\"Connor\", 25, 110000],\n        ]\n        sort_by = \"name\"\n        expected = [\n            [\"Connor\", 25, 110000],\n            [\"Jason\", 26, 55000],\n            [\"John\", 33, 65000],\n            [\"Josie\", 29, 100000],\n            [\"Sarah\", 24, 75000],\n        ]\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_4(self):\n        employees = []\n        sort_by = \"salary\"\n        expected = []\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_5(self):\n        employees = []\n        sort_by = \"name\"\n        expected = []\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n\n    def test_case_6(self):\n        employees = []\n        sort_by = \"age\"\n        expected = []\n        result = program.sort_employees(employees, sort_by)\n        self.assertEqual(result, expected)\n"}},"spaceTime":"","submissionStatistics":{"correctCount":2137,"failureCount":8785},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"72907159","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":15,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642398656"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Sort Employees","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"72907159"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"ProgrammingFundamentalsAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"ProgrammingFundamentalsAssessments","changelog":[],"customInputVars":[{"example":null,"name":"words","schema":{"items":{"type":"string"},"type":"array"}},{"example":null,"name":"n","schema":{"minimum":0,"type":"integer"}}],"difficulty":1,"hints":["\u003cp\u003e\n  The first step is to create a new list that contains the unique words. To do\n  this you can use the \u003cspan\u003e.count()\u003c/span\u003e method while looping through all of\n  the words.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  Once you've determined the unique words you need to find the\n  \u003cspan\u003en\u003c/span\u003e longest words. You can do this by using a sorting function or\n  manually selecting the \u003cspan\u003en\u003c/span\u003e largest words, one at a time.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  To select the \u003cspan\u003en\u003c/span\u003e longest words use a \u003cspan\u003ewhile\u003c/span\u003e loop and\n  select the longest unique word in each iteration of the\n  \u003cspan\u003ewhile\u003c/span\u003e loop. You can do this by using a \u003cspan\u003efor\u003c/span\u003e loop\n  inside of the \u003cspan\u003ewhile\u003c/span\u003e loop. Simply use a variable to keep track of\n  the longest word and while looping through all of the words update the\n  variable when you encounter a longer word. At the end of each\n  \u003cspan\u003ewhile\u003c/span\u003e loop iteration add the longest word to the longest words\n  list and remove it from the unique words list so it is not added again.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Longest Unique Words","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a function that accepts a list of strings that represent words and a\n    positive integer \u003cspan\u003en\u003c/span\u003e, representing the number of words to return.\n    Your function should return a new list containing the \u003cspan\u003en\u003c/span\u003e longest\n    unique words from the input list. Words are unique if they only appear one\n    time in the input list.\n  \u003c/p\u003e\n  \u003cp\u003e\n    There will always be exactly \u003cspan\u003en\u003c/span\u003e words to return and you may\n    return the words in any order.\n  \u003c/p\u003e\n  \u003cp\u003e\n    Note: all strings in the input list will not contain any special characters\n    or spaces.\n  \u003c/p\u003e\n  \u003cp\u003eSee the sample input and output below for a detailed example.\u003c/p\u003e\n  \u003ch3\u003eSample Input #1\u003c/h3\u003e\n  \u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003ewords\u003c/span\u003e = \n[\n'Longer',\n'Whatever',\n'Longer',\n'Ball',\n'Rock',\n'Rocky',\n'Rocky'\n]\n\u003cspan class=\"CodeEditor-promptParameter\"\u003en\u003c/span\u003e = 3\n\u003c/pre\u003e\n  \u003ch3\u003eSample Output #1\u003c/h3\u003e\n  \u003cpre\u003e\n[\n  'Whatever',\n  'Ball',\n  'Rock'\n]\n\u003c/pre\n  \u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        words = [\"Longer\", \"Whatever\", \"Longer\",\n                 \"Ball\", \"Rock\", \"Rocky\", \"Rocky\"]\n        n = 3\n        expected = [\"Whatever\", \"Ball\", \"Rock\"]\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n\n    def test_case_2(self):\n        words = [\"Longer\", \"Whatever\", \"Longer\",\n                 \"Ball\", \"Rock\", \"Rocky\", \"Rocky\"]\n        n = 1\n        expected = [\n            \"Whatever\",\n        ]\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n\n    def test_case_3(self):\n        words = [\"Longer\", \"Whatever\", \"Longer\",\n                 \"Ball\", \"Rock\", \"Rocky\", \"Rocky\"]\n        n = 0\n        expected = []\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n\n    def test_case_4(self):\n        words = [\n            \"Hello\",\n            \"AlgoExpert\",\n            \"Algo\",\n            \"Testing\",\n            \"Programming\",\n            \"Programming\",\n            \"Coding\",\n            \"Python\",\n            \"JavaScript\",\n            \"Coding\",\n            \"Ruby\",\n        ]\n        n = 5\n        expected = [\"AlgoExpert\", \"JavaScript\", \"Testing\", \"Python\", \"Hello\"]\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n\n    def test_case_5(self):\n        words = [\"Hello\", \"Hello\", \"Hello\", \"Abcd\", \"bcd\", \"a\", \"ab\"]\n        n = 2\n        expected = [\"Abcd\", \"bcd\"]\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef get_n_longest_unique_words(words, n):\n    unique_words = get_unique_words(words)\n    longest_words = []\n\n    while len(longest_words) \u003c n:\n        current_longest = \"\"\n        for word in unique_words:\n            if len(word) \u003e len(current_longest):\n                current_longest = word\n\n        unique_words.remove(current_longest)\n        longest_words.append(current_longest)\n\n    return longest_words\n\n\ndef get_unique_words(words):\n    unique_words = []\n    for word in words:\n        if words.count(word) == 1:\n            unique_words.append(word)\n\n    return unique_words\n","# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef get_n_longest_unique_words(words, n):\n    unique_words = get_unique_words(words)\n    sorted_words = sorted(unique_words, key=len, reverse=True)\n    return sorted_words[:n]\n\n\ndef get_unique_words(words):\n    unique_words = []\n    for word in words:\n        if words.count(word) == 1:\n            unique_words.append(word)\n\n    return unique_words\n"],"solutionsDisabled":false,"startingCode":"def get_n_longest_unique_words(words, n):\n    # Write your code here.\n    pass\n","unitTests":"import unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        words = [\"Longer\", \"Whatever\", \"Longer\",\n                 \"Ball\", \"Rock\", \"Rocky\", \"Rocky\"]\n        n = 3\n        expected = [\"Whatever\", \"Ball\", \"Rock\"]\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n\n    def test_case_2(self):\n        words = [\"Longer\", \"Whatever\", \"Longer\",\n                 \"Ball\", \"Rock\", \"Rocky\", \"Rocky\"]\n        n = 1\n        expected = [\n            \"Whatever\",\n        ]\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n\n    def test_case_3(self):\n        words = [\"Longer\", \"Whatever\", \"Longer\",\n                 \"Ball\", \"Rock\", \"Rocky\", \"Rocky\"]\n        n = 0\n        expected = []\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n\n    def test_case_4(self):\n        words = [\n            \"Hello\",\n            \"AlgoExpert\",\n            \"Algo\",\n            \"Testing\",\n            \"Programming\",\n            \"Programming\",\n            \"Coding\",\n            \"Python\",\n            \"JavaScript\",\n            \"Coding\",\n            \"Ruby\",\n        ]\n        n = 5\n        expected = [\"AlgoExpert\", \"JavaScript\", \"Testing\", \"Python\", \"Hello\"]\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n\n    def test_case_5(self):\n        words = [\"Hello\", \"Hello\", \"Hello\", \"Abcd\", \"bcd\", \"a\", \"ab\"]\n        n = 2\n        expected = [\"Abcd\", \"bcd\"]\n        self.assertCountEqual(\n            program.get_n_longest_unique_words(words, n), expected)\n"}},"spaceTime":"","submissionStatistics":{"correctCount":2054,"failureCount":13846},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"9798585","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":8,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642398896"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Longest Unique Words","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"9798585"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"ProgrammingFundamentalsAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"ProgrammingFundamentalsAssessments","changelog":[],"customInputVars":[{"example":null,"name":"list1","schema":{"items":{"type":"integer"},"type":"array"}},{"example":null,"name":"list2","schema":{"items":{"type":"integer"},"type":"array"}},{"example":null,"name":"target","schema":{"type":"integer"}}],"difficulty":1,"hints":["\u003cp\u003e\n  You need to check the sum of every value in the first list and every value in\n  the second list. What type of loops should you setup to do this?\n\u003c/p\u003e\n","\n\u003cp\u003e\n  For this problem you will need to use a nested \u003cspan\u003efor\u003c/span\u003e loop (\n  \u003cspan\u003efor\u003c/span\u003e inside of another \u003cspan\u003efor\u003c/span\u003e). Remember you want to\n  check if the values sum to the \u003cspan\u003etarget\u003c/span\u003e but you need to return a\n  list of indices.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  Loop through \u003cspan\u003elist1\u003c/span\u003e in the first \u003cspan\u003efor\u003c/span\u003e loop. Inside of\n  the first \u003cspan\u003efor\u003c/span\u003e loop, loop through \u003cspan\u003elist2\u003c/span\u003e and check if\n  the current value from \u003cspan\u003elist1\u003c/span\u003e plus the current value from\n  \u003cspan\u003elist2\u003c/span\u003e is equal to \u003cspan\u003etarget\u003c/span\u003e. If they are then add the\n  indices of the values to a new list and return that list at the end of the\n  program.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Pairs Sum To Target","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n  Write a function that accepts two lists (\u003cspan\u003elist1\u003c/span\u003e and\n  \u003cspan\u003elist2\u003c/span\u003e) of integers and a target integer named\n  \u003cspan\u003etarget\u003c/span\u003e. Your function should return all pairs of indices in the\n  form \u003cspan\u003e[x, y]\u003c/span\u003e where \u003cspan\u003elist1[x] + list2[y] == target\u003c/span\u003e. In\n  other words, return the pairs of indices where the sum of their values equals\n  \u003cspan\u003etarget\u003c/span\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  \u003cspan\u003elist1\u003c/span\u003e and \u003cspan\u003elist2\u003c/span\u003e will always have the same number of\n  elements and you may return the pairs in any order.\n\u003c/p\u003e\n\u003ch3\u003eSample Input #1\u003c/h3\u003e\n\u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003elist1\u003c/span\u003e = [1, -2, 4, 5, 9]\n\u003cspan class=\"CodeEditor-promptParameter\"\u003elist2\u003c/span\u003e = [4, 2, -4, -4, 0]\n\u003cspan class=\"CodeEditor-promptParameter\"\u003etarget\u003c/span\u003e = 5\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #1\u003c/h3\u003e\n\u003cpre\u003e\n[\n  [0, 0],  # list1[0] = 1, list2[0] = 4, 1 + 4 = 5\n  [3, 4],  # list1[3] = 5, list2[4] = 0, 5 + 0 = 5\n  [4, 2],  # list1[4] = 9, list2[2] = -4, 9 + -4 = 5\n  [4, 3]   # list1[4] = 9, list2[3] = -4, 9 + -4 = 5\n]\n\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        list1 = [1, -2, 4, 5, 9]\n        list2 = [4, 2, -4, -4, 0]\n        target = 5\n        expected = [[0, 0], [3, 4], [4, 2], [4, 3]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_2(self):\n        list1 = []\n        list2 = []\n        target = 5\n        expected = []\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_3(self):\n        list1 = [3, 4]\n        list2 = [-2, 1]\n        target = 5\n        expected = [[1, 1]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_4(self):\n        list1 = []\n        list2 = []\n        target = 0\n        expected = []\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_5(self):\n        list1 = [1, 2, 3, 4, 5, 6]\n        list2 = [6, 5, 4, 3, 2, 1]\n        target = -5\n        expected = []\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_6(self):\n        list1 = [1, 2, 3, 4, 5, 6]\n        list2 = [6, 5, 4, 3, 2, 1]\n        target = 7\n        expected = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_7(self):\n        list1 = [-4, -5, 6, 7, 8, 0, -19]\n        list2 = [7, 5, 7, 2, 3, 5, 6]\n        target = 12\n        expected = [[2, 6], [3, 1], [3, 5]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_8(self):\n        list1 = [1, 2, 3]\n        list2 = [-3, -3, -3]\n        target = 0\n        expected = [[2, 0], [2, 1], [2, 2]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef pairs_sum_to_target(list1, list2, target):\n    pairs = []\n\n    for i, value1 in enumerate(list1):\n        for j, value2 in enumerate(list2):\n            if value1 + value2 == target:\n                pairs.append([i, j])\n\n    return pairs\n"],"solutionsDisabled":false,"startingCode":"def pairs_sum_to_target(list1, list2, target):\n    # Write your code here.\n    pass\n","unitTests":"import unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        list1 = [1, -2, 4, 5, 9]\n        list2 = [4, 2, -4, -4, 0]\n        target = 5\n        expected = [[0, 0], [3, 4], [4, 2], [4, 3]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_2(self):\n        list1 = []\n        list2 = []\n        target = 5\n        expected = []\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_3(self):\n        list1 = [3, 4]\n        list2 = [-2, 1]\n        target = 5\n        expected = [[1, 1]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_4(self):\n        list1 = []\n        list2 = []\n        target = 0\n        expected = []\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_5(self):\n        list1 = [1, 2, 3, 4, 5, 6]\n        list2 = [6, 5, 4, 3, 2, 1]\n        target = -5\n        expected = []\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_6(self):\n        list1 = [1, 2, 3, 4, 5, 6]\n        list2 = [6, 5, 4, 3, 2, 1]\n        target = 7\n        expected = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_7(self):\n        list1 = [-4, -5, 6, 7, 8, 0, -19]\n        list2 = [7, 5, 7, 2, 3, 5, 6]\n        target = 12\n        expected = [[2, 6], [3, 1], [3, 5]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n\n    def test_case_8(self):\n        list1 = [1, 2, 3]\n        list2 = [-3, -3, -3]\n        target = 0\n        expected = [[2, 0], [2, 1], [2, 2]]\n        result = program.pairs_sum_to_target(list1, list2, target)\n        self.assertCountEqual(result, expected)\n"}},"spaceTime":"","submissionStatistics":{"correctCount":2073,"failureCount":4939},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"72292680","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":5,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642398680"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Pairs Sum To Target","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"72292680"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"ProgrammingFundamentalsAssessments","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"ProgrammingFundamentalsAssessments","changelog":[],"customInputVars":[{"example":null,"name":"frequencies","schema":{"type":"object"}},{"example":null,"name":"string1","schema":{"type":"string"}},{"example":null,"name":"string2","schema":{"type":"string"}}],"difficulty":1,"hints":["\u003cp\u003e\n  The first thing you should check is if you can create either\n  \u003cspan\u003estring1\u003c/span\u003e or \u003cspan\u003estring2\u003c/span\u003e. You can use the\n  \u003cspan\u003e.count()\u003c/span\u003e method to help ypu do this.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  To determine if you can create a string from the frequencies simply loop\n  through all characters in the string and count how many times they occur. If a\n  character doesn't exists in the dictionary or it's frequency is lower than\n  it's number of occurences in the string you cannot create the string.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  If you can only create one of the strings with the given characters then\n  return \u003cspan\u003e1\u003c/span\u003e and if you can't create either return \u003cspan\u003e0\u003c/span\u003e.\n  Otherwise, if you can create both \u003cspan\u003estring1\u003c/span\u003e and\n  \u003cspan\u003estring2\u003c/span\u003e you can nopw determine if you can create both of them\n  without reusing any characters.\n\u003c/p\u003e\n","\n\u003cp\u003e\n  To determine if you can create both \u003cspan\u003estring1\u003c/span\u003e and\n  \u003cspan\u003estring2\u003c/span\u003e without reusing any characters you can concatenate them\n  together and perform the same steps outlined in hint #2. However, if you want\n  to solve this a bit more efficiently what you can also do is loop through the\n  concatenated string and subtract \u003cspan\u003e1\u003c/span\u003e from the frequency of the\n  current character in the frequencies dictionary. If you ever reach a character\n  that does not exist in the dictionary or has a value of \u003cspan\u003e0\u003c/span\u003e you\n  know you cannot create both strings. If you reach the end of the concatenated\n  string then you can create both strings.\n\u003c/p\u003e"],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["python"],"name":"Create Strings From Characters","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a function that accepts a dictionary called\n    \u003cspan\u003efrequencies\u003c/span\u003e and two strings named \u003cspan\u003estring1\u003c/span\u003e and\n    \u003cspan\u003estring2\u003c/span\u003e. The \u003cspan\u003efrequencies\u003c/span\u003e dictionary contains\n    character keys and integer values, the value associated with each character\n    represents its frequency. Your function should return \u003cspan\u003e0\u003c/span\u003e,\n    \u003cspan\u003e1\u003c/span\u003e or \u003cspan\u003e2\u003c/span\u003e according to the cases below.\n  \u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      Your function should return \u003cspan\u003e2\u003c/span\u003e if the frequency of characters\n      in the dictionary is sufficient to create both \u003cspan\u003estring1\u003c/span\u003e and\n      \u003cspan\u003estring2\u003c/span\u003e without reusing any characters.\n    \u003c/li\u003e\n    \u003cli\u003e\n      Your function should return \u003cspan\u003e1\u003c/span\u003e if the frequency of characters\n      in the dictionary is sufficient to create either \u003cspan\u003estring1\u003c/span\u003e or\n      \u003cspan\u003estring2\u003c/span\u003e without reusing any characters.\n    \u003c/li\u003e\n    \u003cli\u003e\n      Your function should return \u003cspan\u003e0\u003c/span\u003e if the frequency of characters\n      in the dictionary is \u003cb\u003enot\u003c/b\u003e sufficient to create either\n      \u003cspan\u003estring1\u003c/span\u003e or \u003cspan\u003estring2\u003c/span\u003e without reusing any\n      characters.\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003ch3\u003eSample Input #1\u003c/h3\u003e\n  \u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003efrequencies\u003c/span\u003e = \n{\n  \"h\": 2,\n  \"e\": 1,\n  \"l\": 1,\n  \"r\": 4,\n  \"a\": 3, \n  \"o\": 2,\n  \"d\": 1,\n  \"w\": 1\n}\n\u003cspan class=\"CodeEditor-promptParameter\"\u003estring1\u003c/span\u003e = \"hello\"\n\u003cspan class=\"CodeEditor-promptParameter\"\u003estring2\u003c/span\u003e = \"world\"\n\u003c/pre\u003e\n  \u003ch3\u003eSample Output #1\u003c/h3\u003e\n  \u003cpre\u003e\n1  # The string \"world\" can be created but \"hello\" cannot be.\n\u003c/pre\n  \u003e\n  \u003ch3\u003eSample Input #2\u003c/h3\u003e\n  \u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003efrequencies\u003c/span\u003e = \n{\n  \"h\": 2,\n  \"e\": 1,\n  \"l\": 2,\n  \"r\": 4,\n  \"a\": 3, \n  \"o\": 2, \n  \"d\": 1,\n  \"w\": 1\n}\n\u003cspan class=\"CodeEditor-promptParameter\"\u003estring1\u003c/span\u003e = \"hello\"\n\u003cspan class=\"CodeEditor-promptParameter\"\u003estring2\u003c/span\u003e = \"world\"\n\u003c/pre\u003e\n  \u003ch3\u003eSample Output #2\u003c/h3\u003e\n  \u003cpre\u003e\n1  # The string \"world\" and \"hello\" can be created but they cannot both be created without reusing any characters. \n   # This is because there is not enough \u003cspan\u003e\"l\"\u003c/span\u003e's.\n\u003c/pre\n  \u003e\n\u003c/div\u003e","releaseDate":"0001-01-01T00:00:00Z","resources":{"python":{"language":"python","sandboxCode":"# This suite of tests is written to run against your code\n# so that we can check its correctness.\n\nimport unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        frequencies = {\"h\": 2, \"e\": 1, \"l\": 1, \"r\": 4, \"a\": 3, \"o\": 2, \"d\": 1, \"w\": 1}\n        string1 = \"hello\"\n        string2 = \"world\"\n        expected = 1\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_2(self):\n        frequencies = {\"h\": 2, \"e\": 1, \"l\": 2, \"r\": 4, \"a\": 3, \"o\": 2, \"d\": 1, \"w\": 1}\n        string1 = \"hello\"\n        string2 = \"world\"\n        expected = 1\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_3(self):\n        frequencies = {\"a\": 3, \"b\": 5, \"c\": 3, \"d\": 2, \"e\": 1}\n        string1 = \"aaabbbc\"\n        string2 = \"bbccde\"\n        expected = 2\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_4(self):\n        frequencies = {\"a\": 3, \"b\": 1, \"c\": 3, \"d\": 2, \"e\": 1}\n        string1 = \"aaabbbc\"\n        string2 = \"bbccde\"\n        expected = 0\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_5(self):\n        frequencies = {}\n        string1 = \"aaabbbc\"\n        string2 = \"bbccde\"\n        expected = 0\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_6(self):\n        frequencies = {}\n        string1 = \"\"\n        string2 = \"\"\n        expected = 2\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_7(self):\n        frequencies = {\"a\": 1}\n        string1 = \"\"\n        string2 = \"\"\n        expected = 2\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n","solutions":["# Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\ndef create_strings_from_characters(frequencies, string1, string2):\n    can_create_string1 = can_create_string_from_frequencies(\n        frequencies, string1)\n    can_create_string2 = can_create_string_from_frequencies(\n        frequencies, string2)\n\n    if (not can_create_string1) or (not can_create_string2):\n        if can_create_string1 or can_create_string2:\n            return 1\n\n        return 0\n\n    for character in string1 + string2:\n        if character not in frequencies or frequencies[character] == 0:\n            return 1\n\n        frequencies[character] -= 1\n\n    return 2\n\n\ndef can_create_string_from_frequencies(frequencies, string):\n    for character in set(string):\n        if string.count(character) \u003e frequencies.get(character, 0):\n            return False\n\n    return True\n"],"solutionsDisabled":false,"startingCode":"def create_strings_from_characters(frequencies, string1, string2):\n    # Write your code here.\n    pass\n","unitTests":"import unittest\n\nimport program\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        frequencies = {\"h\": 2, \"e\": 1, \"l\": 1, \"r\": 4, \"a\": 3, \"o\": 2, \"d\": 1, \"w\": 1}\n        string1 = \"hello\"\n        string2 = \"world\"\n        expected = 1\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_2(self):\n        frequencies = {\"h\": 2, \"e\": 1, \"l\": 2, \"r\": 4, \"a\": 3, \"o\": 2, \"d\": 1, \"w\": 1}\n        string1 = \"hello\"\n        string2 = \"world\"\n        expected = 1\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_3(self):\n        frequencies = {\"a\": 3, \"b\": 5, \"c\": 3, \"d\": 2, \"e\": 1}\n        string1 = \"aaabbbc\"\n        string2 = \"bbccde\"\n        expected = 2\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_4(self):\n        frequencies = {\"a\": 3, \"b\": 1, \"c\": 3, \"d\": 2, \"e\": 1}\n        string1 = \"aaabbbc\"\n        string2 = \"bbccde\"\n        expected = 0\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_5(self):\n        frequencies = {}\n        string1 = \"aaabbbc\"\n        string2 = \"bbccde\"\n        expected = 0\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_6(self):\n        frequencies = {}\n        string1 = \"\"\n        string2 = \"\"\n        expected = 2\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n\n    def test_case_7(self):\n        frequencies = {\"a\": 1}\n        string1 = \"\"\n        string2 = \"\"\n        expected = 2\n        self.assertEqual(program.create_strings_from_characters(frequencies, string1, string2), expected)\n"}},"spaceTime":"","submissionStatistics":{"correctCount":1936,"failureCount":13586},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"21841751","version":0,"video":{"annotations":[],"codeWalkthroughTime":1475,"duration":14,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"642399041"},"visualization":{"inputType":null,"outputType":null}},"difficulty":1,"instructor":"Tim Ruscica","name":"Create Strings From Characters","releaseDate":"0001-01-01T00:00:00Z","type":"CODING_STANDARD","uid":"21841751"}]}
