{"name":"Object-Oriented Programming","lessons":[{"uid":"introduction-to-oop","name":"Introduction","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"In order to understand Object-Oriented Programming, we must start by answering the fundamental question: \"What is an Object?\n","video":{"vimeoId":"606958100","duration":12,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299597528-a5e2d3ed94a672de8edde1b20a120b513405d205b1863d11a_640x360?r=pad"},"questions":[{"uid":"17992367","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"56695249","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"4237996","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"48304696","type":"MCQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"72978942","type":"MCQ","name":"Question 5","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nclass Instructor:\n    def __init__(self, name):\n        self.name = name\n\n\ntim = Instructor(\"Tim\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Object","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    In Python, \u003cspan\u003eobject\u003c/span\u003e is the class that all other classes inherit\n    from, even if it wasn't declared explicitely by the programmer. Almost\n    everything in Python is an object, including \u003cspan\u003efunction\u003c/span\u003es,\n    \u003cspan\u003elist\u003c/span\u003es, \u003cspan\u003eint\u003c/span\u003es and all other instances of built in\n    data types. An objects type is defined by the class that was used to\n    instantiate it. For example, the assignment \u003cspan\u003ex = 1\u003c/span\u003e creates a new\n    object with type \u003cspan\u003eint\u003c/span\u003e containing with value \u003cspan\u003e1\u003c/span\u003e.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Class","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    In programming, a \u003cspan\u003eclass\u003c/span\u003e can be thought of as a template or\n    blueprint for the creation of objects. The type of an object is the class\n    that was used to create it. Classes define the attributes and methods (i.e.\n    the behavior) of objects that are instantiated using them.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"creating-classes","name":"Creating Classes","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"We know that Python comes with a variety of built-in classes; but how do we go about creating our own?\n","video":{"vimeoId":"606954080","duration":19,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299590833-6ee081903fc716da9a3bb7fb6fa01ea83fd75e32b8315dece_640x360?r=pad"},"questions":[{"uid":"96191862","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"73779051","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"72862304","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"74268580","type":"MCQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"81772925","type":"MCQ","name":"Question 5","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"97179672","type":"MCQ","name":"Question 6","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"22572470","type":"MCQ","name":"Question 7","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"187884","type":"FITBQ","name":"Question 8","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"78195868","type":"CODING_STANDARD","name":"ContactInformation Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nclass Instructor:\n    def __init__(self, name):\n        self.name = name\n\n\ntim = Instructor(\"Tim\")\nprint(tim.name)","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Attribute","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    An \u003cstrong\u003eattribute\u003c/strong\u003e is an \u003cstrong\u003eobject\u003c/strong\u003e that belongs\n    either to a class, or to an instance of that class. Attributes of an object\n    can be referenced using the \u003cspan\u003e.\u003c/span\u003e notation:\n    \u003cspan\u003eprint(person.name)\u003c/span\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n    \u003cstrong\u003eClass attributes\u003c/strong\u003e are attributes that are shared by all\n    instances of that class, while \u003cstrong\u003einstance attributes\u003c/strong\u003e may have\n    a different value for each and every instance that was created.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Constructor","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    The \u003cstrong\u003econstructor\u003c/strong\u003e of a class is a function defined within the\n    class definition that will be called when a new instance is created. In\n    Python, the \u003cstrong\u003econstructor\u003c/strong\u003e is implemented with the\n    \u003cspan\u003e__init__\u003c/span\u003e method.\n  \u003c/p\u003e\n  \u003cp\u003e\n    Typically, the \u003cstrong\u003econstructor\u003c/strong\u003e is responsible for initializing\n    any instance variables, and essentially prepares the instance for use by the\n    rest of the program.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Instance","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n    An \u003cstrong\u003einstance\u003c/strong\u003e of a class is an object created from that class's \n    \"blueprint\". For example, \u003cspan\u003ePerson(\"Tim\")\u003c/span\u003e will return an \n    \u003cstrong\u003einstance\u003c/strong\u003e of the \u003cspan\u003ePerson\u003c/span\u003e class.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Encapsulation","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n    Encapsulation, in \u003cstrong\u003eObject Oriented Programming\u003c/strong\u003e, refers to \n    how a programmer might prevent outside access to the details of a class in \n    order to simplify the way the class might be used, or to make it harder to\n    misuse the functionality that is exposed through certain methods or \n    properties.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"methods","name":"Methods","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Hopefully you're starting to get a clearer sense of what Object-Oriented Programming is and how it works at a high level. But if you're still feeling a bit lost, worry not! \n\nThere is a method—or in this case, many methods—to this madness.\n","video":{"vimeoId":"606966797","duration":16,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299591141-72075ee4890b4cd1d676fe49b231e51df9db134cf1c8a9e97_640x360?r=pad"},"questions":[{"uid":"98724644","type":"CODING_STANDARD","name":"Rectangle Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0},{"uid":"9718736","type":"CODING_STANDARD","name":"Group Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0},{"uid":"52048417","type":"CODING_STANDARD","name":"Group Class Continued","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nclass Instructor:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name.capitalize()\n\n    def say_name(self):\n        print(f\"My name is {self.name.capitalize()}!\")\n\n\ntim = Instructor(\"tim\")\ntim.say_name()","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Method","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n    A \u003cstrong\u003emethod\u003c/strong\u003e is a function defined inside of a \u003cstrong\u003eclass\u003c/strong\u003e \n    definition. There are three important kinds of methods: \u003cstrong\u003einstance methods\u003c/strong\u003e,\n    \u003cstrong\u003eclass methods\u003c/strong\u003e, and \u003cstrong\u003estatic methods\u003c/strong\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"properties","name":"Properties","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Python boasts some interesting properties that differentiate it from other Object-Oriented Programming languages. The concept of properties is one such property.\n","video":{"vimeoId":"606983993","duration":16,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299590971-ac376c2b98e8651797c0e784092238cec0561e5a78f20d9f6_640x360?r=pad"},"questions":[{"uid":"22159653","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"39470725","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"96368636","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"53082434","type":"CODING_STANDARD","name":"BankAccount Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0},{"uid":"66608707","type":"CODING_STANDARD","name":"BankAccount Class Continued","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nclass Instructor:\n    def __init__(self, name):\n        self.name = name\n\n    @property\n    def name(self):\n        return self._name.capitalize()\n\n    @name.setter\n    def name(self, value):\n        if type(value) != str:\n            raise Exception(\"Name must be a string!\")\n\n        if len(value) == 0:\n            raise Exception(\"Name cannot be empty!\")\n\n        self._name = value\n\n\ntim = Instructor(\"tim\")\nprint(\"Capitalized name:\", tim.name)\n\ntim.name = \"timothy\"\nprint(\"Capitalized name:\", tim.name)\n\ntim.name = 13  # this should raise an exception!","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"class-methods-and-attributes","name":"Class Methods And Attributes","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"A class is just a blueprint that objects are modeled after; yet, it can actually possess attributes and methods that are specific to itself and only itself, but not any instance of itself.\n\nDoes that confuse you? Luckily, the solution is simple: hit the play button on the video below!\n","video":{"vimeoId":"641608926","duration":15,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299592655-053f2280be27e97caa2989ec02959f47c30dca77d287b1249_640x360?r=pad"},"questions":[{"uid":"58203472","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"43568413","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"88382130","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"14885428","type":"MCQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"28669794","type":"CODING_STANDARD","name":"Employee Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0},{"uid":"10148609","type":"CODING_STANDARD","name":"Temperature Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nclass Instructor:\n    instructors = []\n\n    def __init__(self, name):\n        self.name = name\n        Instructor.instructors.append(self)\n\n\ntim = Instructor(\"Tim\")\nclement = Instructor(\"Clement\")\n\nprint(f\"There are {len(Instructor.instructors)} instructors\")\nfor instructor in Instructor.instructors:\n    print(f\"{instructor.name} is an instructor!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Class Attribute","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    An \u003cstrong\u003eattribute\u003c/strong\u003e is an \u003cstrong\u003eobject\u003c/strong\u003e that belongs\n    either to a class, or to an instance of that class. Attributes of an object\n    can be referenced using the \u003cspan\u003e.\u003c/span\u003e notation:\n    \u003cspan\u003eprint(person.name)\u003c/span\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n    A \u003cb\u003eclass attribute\u003c/b\u003e is an attribute that is associated with a class,\n    not an instance of a class. Class attributes can be modified and accessed by\n    using the class name directly or by using an instance of the class.\n    Typically class attributes are defined at the top of the class, inside the\n    class body.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Class Method","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A \u003cb\u003eclass method\u003c/b\u003e is a method that has a mandatory\n    \u003cspan\u003ecls\u003c/span\u003e parameter and can only access class attributes and other\n    class methods. It does not act on an instance of a class, but on the class\n    itself. Class methods are denoted with the\n    \u003cspan\u003e@classmethod\u003c/span\u003e decorator.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"static-methods","name":"Static Methods","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Yup, yet another type of method you need to know about.\n","video":{"vimeoId":"641609152","duration":13,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299592458-72677313edca1c322a589808545f675cf60dc8122ac351e4a_640x360?r=pad"},"questions":[{"uid":"71956481","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"67114957","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"94507608","type":"CODING_STANDARD","name":"Physics Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nimport math\n\n\nclass Geometry:\n    @staticmethod\n    def perimeter_of_square(side_length):\n        return 4 * side_length\n\n    @staticmethod\n    def area_of_square(side_length):\n        return side_length ** 2\n\n    @staticmethod\n    def perimeter_of_circle(radius):\n        return 2 * math.pi * radius\n\n    @staticmethod\n    def area_of_circle(radius):\n        return math.pi * (radius ** 2)\n\n\nprint(\"Perimeter of square with side of length 7:\", Geometry.perimeter_of_square(7))\nprint(\"Area of square with side of length 7:\", Geometry.area_of_square(7))\n\nprint(\"Perimeter of circle with radius of length 3:\", Geometry.perimeter_of_circle(3))\nprint(\"Perimeter of circle with radius of length 3:\", Geometry.area_of_circle(3))","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Static Method","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A \u003cstrong\u003estatic\u003c/strong\u003e method is defined within a class but should not\n    reference anything relevant to that class specifically, except for other\n    static methods.\n  \u003c/p\u003e\n  \u003cp\u003e\n    For the most part, static methods should only be used for\n    \u003cstrong\u003epure\u003c/strong\u003e\n    functions, which do not use temporary variables outside of their own scope\n    and exclusively transform a set of inputs into some outputs. For instance, a\n    method that converts a distance from kilometers to miles should most likely\n    be \u003cstrong\u003estatic\u003c/strong\u003e. Static methods are denoted using the\n    \u003cspan\u003e@staticmethod\u003c/span\u003e decorator.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"inheritance","name":"Inheritance","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Much like biological organisms pass down traits from parent to offspring through the process of heredity, Python classes pass down properties from parent to child through the process of inheritance.\n","video":{"vimeoId":"641609721","duration":36,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299590693-92f6d7aa2335349db23df08820d4590766eaddf4963eb2d5a_640x360?r=pad"},"questions":[{"uid":"19061288","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"90007835","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"28118103","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"17811717","type":"MCQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"98892224","type":"MCQ","name":"Question 5","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"92061720","type":"MCQ","name":"Question 6","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"51632452","type":"CODING_STANDARD","name":"Animal Inheritance","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nclass Animal:\n    def __init__(self, species):\n        self.species = species\n\n\nclass Dog(Animal):\n    def __init__(self, name):\n        super().__init__(\"Dog\")\n        self.name = name\n\n    def speak(self):\n        print(f\"{self.species} named {self.name}: Woof!\")\n\n\nclass Cat(Animal):\n    def __init__(self, age):\n        super().__init__(\"Cat\")\n        self.age = age\n\n    def speak(self):\n        print(f\"{self.age} year old {self.species}: Miao!\")\n\n\nanimals = [Dog(\"Rex\"), Cat(13), Dog(\"Rose\")]\nfor animal in animals:\n    animal.speak()","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Child Class","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    When a class \u003cspan\u003eA\u003c/span\u003e inherits from class \u003cspan\u003eB\u003c/span\u003e, we say that\n    class \u003cspan\u003eA\u003c/span\u003e is a \u003cstrong\u003echild class\u003c/strong\u003e of \u003cspan\u003eB\u003c/span\u003e.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Parent Class","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n    When a class \u003cspan\u003eA\u003c/span\u003e inherits from class \u003cspan\u003eB\u003c/span\u003e, we say\n    that class \u003cspan\u003eB\u003c/span\u003e is a \u003cstrong\u003eparent class\u003c/strong\u003e of \u003cspan\u003eA\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Polymorphism","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cb\u003ePolymorphism\u003c/b\u003e is a term originating from biology, where poly means\n    many and morphism means forms (this is a simplification). In programming,\n    polymorphism refers to the abillity for an object to behave in different\n    ways and exhibit different beahviour based on the context it's used in.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Method Overriding","section":"OOP","definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Method \u003cstrong\u003eoverriding\u003c/strong\u003e is when a programmer re-defines a method\n    on a class that was already defined in its\n    \u003cstrong\u003eparent class(es)\u003c/strong\u003e.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"abstract-classes","name":"Abstract Classes","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"We have to warn you: this is a tricky topic! Abstract classes are—perhaps both ironically and unsurprisingly—fairly abstract. Go figure.\n","video":{"vimeoId":"609348183","duration":22,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299593893-052b69aaa4b1a8db20f7292f8a14fb6bc219f96236b85d0fa_640x360?r=pad"},"questions":[{"uid":"63918035","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"83489312","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"91913860","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"90441210","type":"MCQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"78813119","type":"CODING_STANDARD","name":"Abstract Animal Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nclass AbstractVehicle:\n    def get_max_speed(self):\n        raise NotImplementedError\n\n    def get_make(self):\n        raise NotImplementedError\n\n    def get_wheel_count(self):\n        raise NotImplementedError\n\n    def display(self):\n        print(f\"Make = {self.get_make()}, Wheel Count = {self.get_wheel_count()}, Top Speed = {self.get_max_speed()}\")\n\n\nclass Car(AbstractVehicle):\n    def __init__(self, make):\n        self.make = make\n\n    def get_wheel_count(self):\n        return 4\n\n    def get_make(self):\n        return self.make\n\n\nclass Motorcycle(AbstractVehicle):\n    def __init__(self, make):\n        self.make = make\n\n    def get_wheel_count(self):\n        return 2\n\n    def get_make(self):\n        return self.make\n\n\nclass Tesla(Car):\n    def __init__(self, model):\n        super().__init__(\"Tesla\")\n        self.model = model\n\n    def get_max_speed(self):\n        if self.model == \"Plaid\":\n            return 250\n        return 200\n\n\nclass Yamaha(Motorcycle):\n    def __init__(self):\n        super().__init__(\"Yamaha\")\n\n    def get_max_speed(self):\n        return 150\n\n\nvehicles = [Tesla(\"Plaid\"), Yamaha(), Tesla(\"S\")]\nfor vehicle in vehicles:\n    vehicle.display()","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Abstract Method","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    An \u003cb\u003eabstract method\u003c/b\u003e is a method that is defined in a interface or\n    abstract class and does not provide an implementation. Abstract methods are\n    designed to be overriden by base or subclasses that extend the class or\n    implement the interface they're defined in.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Abstract Class","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    An \u003cb\u003eabstract class\u003c/b\u003e is a class that contains at least one abstract\n    method and is not meant to be instantiated. Abstract classes are meant to\n    act as the parent or base class in an inheritance hierarchy. Typically\n    abstract classes implement some functionality that can be used commonly by\n    all child or subclasses.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"interfaces","name":"Interfaces","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"If you thought the previous lesson was abstract, wait until we start telling you about the blueprints for classes...\n","video":{"vimeoId":"609332615","duration":14,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299591288-8e8581ebe57523951a729e9280bbb76f15517ab7d8aec6c0f_640x360?r=pad"},"questions":[{"uid":"38755538","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"55390937","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"25071297","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"38536610","type":"CODING_STANDARD","name":"Shape Interface","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nimport io\n\n\nclass TranslatorInterface:\n    def translate(self, text):\n        raise NotImplementedError\n\n    def untranslate(self, text):\n        raise NotImplementedError\n\n\nclass SpanishTranslator(TranslatorInterface):\n    def translate(self, text):\n        words = text.split(\" \")\n        for i, word in enumerate(words):\n            if word == \"hello\":\n                words[i] = \"hola\"\n            elif word == \"world\":\n                words[i] = \"mundo\"\n        return \" \".join(words)\n\n    def untranslate(self, text):\n        words = text.split(\" \")\n        for i, word in enumerate(words):\n            if word == \"hola\":\n                words[i] = \"hello\"\n            elif word == \"mundo\":\n                words[i] = \"world\"\n        return \" \".join(words)\n\n\nclass FrenchTranslator(TranslatorInterface):\n    def translate(self, text):\n        words = text.split(\" \")\n        for i, word in enumerate(words):\n            if word == \"hello\":\n                words[i] = \"bonjour\"\n            elif word == \"world\":\n                words[i] = \"monde\"\n        return \" \".join(words)\n\n    def untranslate(self, text):\n        words = text.split(\" \")\n        for i, word in enumerate(words):\n            if word == \"bonjour\":\n                words[i] = \"hello\"\n            elif word == \"monde\":\n                words[i] = \"world\"\n        return \" \".join(words)\n\n\nTRANSLATORS = {\n    \"spanish\": SpanishTranslator(),\n    \"french\": FrenchTranslator(),\n}\n\n# In order to check that the translator works correctly, we first\n# translate \"hello world\" into that language, and then re-translate\n# the result. At the end, we should be getting \"hello world\" back.\ndef check_translator_accuracy(language):\n    translator = TRANSLATORS[language]\n\n    original_text = \"hello world\"\n    translated = translator.translate(original_text)\n    new_text = translator.untranslate(translated)\n\n    if original_text != new_text:\n        raise Exception(f\"Translator {language} does not work correctly!\")\n\n    print(f\"The {language} translator is correct!\")\n\n\ncheck_translator_accuracy(\"spanish\")\ncheck_translator_accuracy(\"french\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Interface","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    In Python, there is no formal definition for an \u003cb\u003einterface\u003c/b\u003e but we can\n    still represent one by creating a class that only defines abstract methods.\n    An interface is designed to be used as an abstract data type that enforces\n    that classes that implement it define specific methods and behavior.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"operator-overloading","name":"Operator Overloading","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"You + Programming == ProgrammingExpert\n","video":{"vimeoId":"641618890","duration":44,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299592839-d7672ac29a2460e49e6f47ce96e9db0983f8dca8b0b4f252f_640x360?r=pad"},"questions":[{"uid":"39393380","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"81708035","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"53799714","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"84830113","type":"MCQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"86563845","type":"CODING_STANDARD","name":"Vector Class","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nclass Menu:\n    def __init__(self, items):\n        # Note that since the MenuItem has a __gt__ dunder method overridden,\n        # the sorting will by default sort the items by name.\n        self.items = sorted(items)\n\n    def __str__(self):\n        s = f\"*** Menu ({len(self)} items) ***\\n\"\n        for item in self.items:\n            s += f\"- {item.name}: ${item.price} ({item.calories} calories)\\n\"\n        return s\n\n    def __len__(self):\n        return len(self.items)\n\n    def __add__(self, other):\n        return Menu(self.items + other.items)\n\n\nclass MenuItem:\n    def __init__(self, name, price, calories):\n        self.name = name\n        self.price = price\n        self.calories = calories\n\n    def __eq__(self, other):\n        return (self.name, self.price, self.calories) == (other.name, other.price, other.calories)\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __gt__(self, other):\n        return self.name \u003e other.name\n\n\nitems1 = [\n    MenuItem(\"Apple\", 1, 50),\n    MenuItem(\"Filet Mignon\", 10, 500),\n    MenuItem(\"Cake\", 5, 350),\n    MenuItem(\"Zucchini\", 3, 15),\n    MenuItem(\"Wine\", 30, 250),\n]\nmenu1 = Menu(items1)\nprint(menu1)\n\nitems2 = [\n    MenuItem(\"Orange\", 1, 50),\n    MenuItem(\"Pasta\", 8, 300),\n    MenuItem(\"Beef\", 10, 500),\n]\nmenu2 = Menu(items2)\nprint(menu2)\n\nprint(menu1 + menu2)","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Dunder Method","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n    \u003cp\u003e\n  Dunder methods are methods that are prefixed and suffixed by two \n  underscores. The most important to know is the \u003cspan\u003e__init__\u003c/span\u003e \n  dunder method, which is sometimes called the \u003cspan\u003econstructor\u003c/span\u003e\n  of the class, and defines how a new instance is initialized after \n  being created.\n    \u003c/p\u003e\n\n    \u003cp\u003e\n  Implementing those methods will sometimes change how \n  certain operators will behave (like \u003cspan\u003e+\u003c/span\u003e with \u003cspan\u003e__add__\u003c/span\u003e \n  and \u003cspan\u003e==\u003c/span\u003e with \u003cspan\u003e__eq__\u003c/span\u003e). Other examples include \n  \u003cspan\u003e__len__\u003c/span\u003e, \u003cspan\u003e__str__\u003c/span\u003e, \u003cspan\u003e__repr__\u003c/span\u003e \n  and many more.\n    \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false}],"assessment":{"uid":"object-oriented-programming-assessment","name":"Object-Oriented Programming Assessment","questions":[{"uid":"67239960","type":"CODING_STANDARD","name":"Inventory Class","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"ObjectOrientedProgrammingAssessments","difficulty":1},{"uid":"17952219","type":"CODING_STANDARD","name":"Student Class","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"ObjectOrientedProgrammingAssessments","difficulty":1},{"uid":"9680746","type":"CODING_STANDARD","name":"Geometry Inheritance","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"ObjectOrientedProgrammingAssessments","difficulty":1},{"uid":"9680756","type":"CODING_STANDARD","name":"Deck Class","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"ObjectOrientedProgrammingAssessments","difficulty":1},{"uid":"9680748","type":"CODING_STANDARD","name":"FileSystem Implementation","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"ObjectOrientedProgrammingAssessments","difficulty":1}]}}
