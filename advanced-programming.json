{"name":"Advanced Programming","lessons":[{"uid":"modules-and-packages","name":"Modules and Packages","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Basically just a fancy way of saying \"files and folders\".","video":{"vimeoId":"612153875","duration":37,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299595645-be3a3a15f495859ba7b30ae8eeab136fcd9d728c8007eafa3_640x360?r=pad"},"questions":[{"uid":"70550235","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"39991726","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"77243459","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"10717325","type":"MCQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\ndef main(name):\n    print(f\"Hello {name}!\")\n\n\nif __name__ == \"__main__\":\n    main(\"ProgrammingExpert\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Main Module","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    In Python, the \u003cspan\u003emain\u003c/span\u003e module is the one that is invoked or run\n    directly. Python will automatically set the \u003cspan\u003e__name__\u003c/span\u003e variable\n    of that module to the string \u003cspan\u003e\"__main__\"\u003c/span\u003e. All modules that are\n    imported from that main package will have their own values for the\n    \u003cspan\u003e__name__\u003c/span\u003e variable.\n  \u003c/p\u003e\n  \u003cp\u003e\n    When writing your modules in Python, it is best practice to run some parts\n    of the code conditionally based on that \u003cspan\u003e__name__\u003c/span\u003e variable:\n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-python\"\u003eif __name__ == \"__main__\":\n  print(\"This code will only run if this is the main package!\")\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Module","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    In Python, a \u003cb\u003emodule\u003c/b\u003e is simply any Python file (something ending in\n    \u003cspan\u003e.py\u003c/span\u003e). Modules provide a way to split code into multiple files\n    and make programs easier to understand. One Python module is able to import\n    code from another Python module.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Package","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A Python \u003cb\u003epackage\u003c/b\u003e is simply a directory that contains a special file\n    named \u003cspan\u003e__init__.py\u003c/span\u003e, and typically a collection of other Python\n    modules. Packages provide a way to organize Python modules. When importing a\n    Python package the code inside of the \u003cspan\u003e__init__.py\u003c/span\u003e file will run\n    once.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"files","name":"Files","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"The ability to handle files is essential to many programs and applications. But how do you imbue your code with such a superpower?\n\nFortunately, Python boasts several built-in functions that allow you to perform a variety of file operations. Study them, and you'll be well on your way toward becoming a master (file) manipulator.","video":{"vimeoId":"619877985","duration":25,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299595347-de9bf2ac6dc3e5235716bb39620d0c7f94f3a19f71f5c8955_640x360?r=pad"},"questions":[{"uid":"83374858","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"67725491","type":"CODING_STANDARD","name":"Reading Files","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0},{"uid":"87917744","type":"CODING_STANDARD","name":"Writing To Files","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nwith open(\"awesome_people.txt\", \"w\") as file:\n    file.write(\"Tim\\n\")\n    file.write(\"Antoine\\n\")\n    file.write(\"Clement\")\n\nfile = open(\"awesome_people.txt\", \"r\")\nawesome_people = file.read().split(\"\\n\")\nfile.close()\n\nprint(awesome_people)","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"New Line Character - \\n","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    The \u003cb\u003enew line character\u003c/b\u003e is a \u003cspan\u003e\\n\u003c/span\u003e. This character is\n    invisible when printed but tells the computer to move the cursor to the next\n    line. For example, \u003cspan\u003eprint(\"hello\\nworld\\n!\")\u003c/span\u003e outputs the\n    following:\n  \u003c/p\u003e\n  \u003cpre\u003ehello\nworld\n!\u003c/pre\n  \u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"args-and-kwargs","name":"*args And **kwargs","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"You might be wondering why the title of this video reads and sounds like guttural Orcish growls straight out of World of Warcraft. Well, as it turns out, this is actual Python syntax. Perhaps Guido van Rossum secretly originates from Draenor?","video":{"vimeoId":"612153968","duration":17,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299596159-d726c86631fd218b6acf5e3e0f32e4b3a64474b07dd2f3c19_640x360?r=pad"},"questions":[{"uid":"67675925","type":"FITBQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"12098743","type":"FITBQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"*args-and-**kwargs-1","type":"CODING_STANDARD","name":"*Args and **Kwargs","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\ndef pretty_print(*args, **kwargs):\n    print(\"*\" * 15)\n    print(*args, **kwargs)\n    print(\"*\" * 15)\n\n\npretty_print(*[\"H\", \"e\", \"l\", \"l\", \"o\", \"world\"], end=\"!\\n\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"*args and **kwargs","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Oftentimes, especially when writing \u003cstrong\u003edecorators\u003c/strong\u003e, you need to\n    write a function that can accept any number of arguments (positional and\n    keyword), and perform actions on these arguments no matter how many of them\n    there are. By using \u003cspan\u003e*args\u003c/span\u003e and \u003cspan\u003e**kwargs\u003c/span\u003e as\n    arguments to your function, you can ensure that the variable\n    \u003cspan\u003eargs\u003c/span\u003e and \u003cspan\u003ekwargs\u003c/span\u003e will contain all of the previously\n    unused arguments that were passed into your function.\n  \u003c/p\u003e\n  \u003cp\u003e\n    You must remember that \u003cspan\u003eargs\u003c/span\u003e will be a tuple containing all\n    positional arguments that were passed, and \u003cspan\u003ekwargs\u003c/span\u003e will be a\n    dictionary containing all of the keyword arguments. For instance:\n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-python\"\u003edef add_all_args(*args):\n    return sum(list(args))\n\nprint(add_all_args(1, 2, 3, 4, 5)) # 15\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"lambda-functions","name":"Lambda Functions","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"A needlessly intimidating name for something that is exceedingly simple.","video":{"vimeoId":"612154545","duration":9,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299596031-8b362e14e62b1246c69901a08183e2e40d0e49e70cb70a8f1_640x360?r=pad"},"questions":[{"uid":"81921735","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"50343709","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"76104018","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"36201878","type":"FITBQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"lambda-functions-1","type":"CODING_STANDARD","name":"Lambda Functions","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nadd_one = lambda x: x + 1\n\nprint(add_one(1))\nprint(add_one(41))\n\nhyphenise = lambda s: s.lower().replace(\" \", \"-\")\nprint(hyphenise(\"Hello World\"))","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Lambda","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A \u003cb\u003elambda\u003c/b\u003e is an anonymous function that can be defined in-line without\n    the use of the \u003cspan\u003edef\u003c/span\u003e keyword. This is extremely useful when\n    defining a custom sort ordering for a collection. Example:\n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre\n    class=\"line-numbers\"\n  \u003e\u003ccode class=\"language-python\"\u003e# Here we have a list of tuples, \n# each representing a food and its price.\nlst = [\n    ('cake','30'),\n    ('orange','3'),\n    ('pasta','20'),\n]\n\n# This lambda function lets us sort \n# by the price of the items.\nlst.sort(key=lambda x:x[1])\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"map-and-filter","name":"Map and Filter","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"These two nifty functions will help you elegantly deal with iterable objects in many situations—and by now, you know how often you encounter lists and other similar sequence types in the world of programming!","video":{"vimeoId":"612167642","duration":10,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299595534-1eb591ecf0a23dd7501b1ebb4d74f134425d4a56426830423_640x360?r=pad"},"questions":[{"uid":"68755062","type":"FITBQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"80330680","type":"FITBQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"map-and-filter-1","type":"CODING_STANDARD","name":"Map And Filter","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nlst = [i for i in range(10)]\nplus_two = map(lambda x: x + 2, lst)\nevens = filter(lambda x: x % 2 == 0, lst)\nodds = filter(lambda x: x % 2 == 1, lst)\n\nprint(\"Original List:\", lst)\nprint(\"Plus 2:\", list(plus_two))\nprint(\"Evens:\", list(evens))\nprint(\"Odds:\", list(odds))","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"function-closures","name":"Function Closures","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Warning: this is a tricky topic! And while this video will serve as a good introduction, it'll likely leave you scratching your head and wanting more clarity. Unfortunately, you'll have to seek closure elsewhere.","video":{"vimeoId":"614035771","duration":22,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299594381-4ddaeb59d84655cdf018ce29dde2f72d19252e0be0ce45aee_640x360?r=pad"},"questions":[{"uid":"54211104","type":"FITBQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"32211276","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"51398110","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\ndef outer(x, y):\n    def nested():\n        return x + y\n\n    return nested\n\nvalue = outer(1, 2)()\nprint(value)","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"decorators","name":"Decorators","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":true,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"If decorating Python functions sounds less glamorous than decorating Christmas trees, birthday cakes, or building interiors, that's probably because decorating Python functions is less glamorous than decorating Christmas trees, birthday cakes, or building interiors.","video":{"vimeoId":"614050781","duration":20,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299594162-baa57a49b90aea91acf160a9abc442b76d4363bc5ff62b19b_640x360?r=pad"},"questions":[{"uid":"50856319","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"4508400","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"decorators-1","type":"CODING_STANDARD","name":"Add One Decorator","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0},{"uid":"decorators-2","type":"CODING_STANDARD","name":"Print Return Value Decorator","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\nimport time\n\n\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n\n        total_time = end_time - start_time\n        print(f\"Time taken to execute: {total_time * 1000000} microseconds\")\n        return result\n\n    return wrapper\n\n\ndef print_arguments(func):\n    def wrapper(*args, **kwargs):\n        print(\"Args:\", args, \"Kwargs:\", kwargs)\n        result = func(*args, **kwargs)\n        return result\n\n    return wrapper\n\n\ndef ignore_exception(func):\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            print(\"Exception ignored:\", e)\n        return None\n\n    return wrapper\n\n\n@print_arguments\n@ignore_exception\n@timer\ndef loop(n):\n    if n \u003e 10000:\n        raise Exception(\"n is too large to loop through!\")\n    for i in range(n):\n        pass\n\n\nloop(12)\nloop(1000000)","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Decorator","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cstrong\u003eDecorators\u003c/strong\u003e describe a special kind of function that is\n    meant to \u003cstrong\u003ewrap\u003c/strong\u003e another function. The canonical example is to\n    write a decorator that is meant to print out the time it took for a given\n    function to execute whenever it is called.\n  \u003c/p\u003e\n  \u003cp\u003e\n    A particular \u003cspan\u003e@\u003c/span\u003e notation is used to indicate that a function\n    should be wrapped by one or more \u003cstrong\u003edecorators\u003c/strong\u003e:\n  \u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv class=\"code-wrapper prism\"\u003e\n  \u003cpre class=\"line-numbers\"\u003e\u003ccode class=\"language-python\"\u003e@timer\ndef run_simulation():\n    ...\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"iterators","name":"Iterators","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"It's time to talk about iteration again! Don't worry, this is all new material; we won't be reiterating—pun absolutely intended—content you've already seen before.","video":{"vimeoId":"614513468","duration":19,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299594049-c007143157a72895cbbfecd7fc82d783cce9b878bc3c43db6_640x360?r=pad"},"questions":[{"uid":"19108223","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"30860656","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"iterators-1","type":"CODING_STANDARD","name":"Range Iterator","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\n# This DividerIterator class is an iterator that will start\n# at a number `start` and divide that number by `factor`\n# over and over again until it is smaller than or equal\n# to `end`.\nclass DividerIterator:\n    def __init__(self, start, factor, end):\n        self.start = start\n        self.factor = factor\n        self.end = end\n\n    def __iter__(self):\n        self.current = self.start\n        return self\n\n    def __next__(self):\n        if self.current \u003c self.end:\n            raise StopIteration\n        current = self.current\n        self.current = current / self.factor\n        return current\n\n\n# Let's keep dividing 100 by 7 over and over again\n# until 0.01.\ncount = 0\nfor n in DividerIterator(100, 7, 0.01):\n    print(f\"Divided {count} times: {n}\")\n    count += 1","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Iterator","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    An \u003cstrong\u003eiterator\u003c/strong\u003e is a special kind of object that implements a\n    single function: \u003cspan\u003enext()\u003c/span\u003e. Iterators historically were created\n    through class definitions which had to implement the\n    \u003cspan\u003e__iter__()\u003c/span\u003e method to create the iterator, in addition to the\n    \u003cspan\u003e__next__()\u003c/span\u003e method. However, most modern programmers opt to use\n    the \u003cstrong\u003egenerator\u003c/strong\u003e\n    syntax nowadays due to increased readability and conciseness.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"generators","name":"Generators","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"While these bad boys won't bring the lights back on during a blackout, they'll reliably and efficiently power your applications in a variety of different situations, especially when large datasets are involved.","video":{"vimeoId":"614513508","duration":15,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299594281-82f71ec0e654c0983f74833c2146b9cb3ee54f86d3744ddee_640x360?r=pad"},"questions":[{"uid":"69675508","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"12215187","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"generators-1","type":"CODING_STANDARD","name":"Range Generator","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\n\n# I bet you couldn't store all of those in a list! There are an\n# infinite number of even numbers but generators solve this problem\n# easily!\ndef all_even_numbers():\n    i = 0\n    while True:\n        if i % 2 == 0:\n            yield i\n        i += 1\n\n\ncount = 0\nfor even_number in all_even_numbers():\n    print(\"Even number:\", even_number)\n    count += 1\n\n    # Let's just print 10 even numbers, but this could run forever\n    # if we wanted to let it!\n    if count \u003e= 10:\n        break","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Generator","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A \u003cstrong\u003egenerator\u003c/strong\u003e is a special kind of\n    \u003cstrong\u003eiterator\u003c/strong\u003e that uses the \u003cspan\u003eyield\u003c/span\u003e keyword to return\n    the next value in the sequence.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"compilers-and-interpreters","name":"Compilers and Interpreters","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Buckle up! This is where things start to get complicated.","video":{"vimeoId":"614513556","duration":8,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299595741-ecd8f8b8d850d92e0e5eb0a5f2e07b07f34aa450351fb5bea_640x360?r=pad"},"questions":[{"uid":"56903865","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"50976304","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"86303230","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"11112617","type":"MCQ","name":"Question 4","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"55068141","type":"MCQ","name":"Question 5","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nwith open(\"awesome_people.txt\", \"w\") as file:\n    file.write(\"Tim\\n\")\n    file.write(\"Antoine\\n\")\n    file.write(\"Clement\")\n\nawesome_people = open(\"awesome_people.txt\", \"r\").read().split(\"\\n\")\nprint(awesome_people)","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Compiler","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n    \u003cp\u003e\n        A \u003cb\u003ecompiler\u003c/b\u003e is a program that takes in source code (the code that we, \n        humans, write) and transforms it into code that a machine can interpret\n        (bytecode) or execute (binary code).\n    \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Interpreter","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    An \u003cb\u003einterpreter\u003c/b\u003e is a program that is capable of translating code\n    (typically bytecode) into machine code that can be ran and executed by the\n    CPU (central processing unit). Python code is first compiled into bytecode,\n    that bytecode is then passed to the interpreter where it is interpreted and\n    executed.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Source Code","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n    \u003cp\u003e\n        The \u003cb\u003esource code\u003c/b\u003e is the code that the programmers \n        write and read.\n    \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Bytecode","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cb\u003eBytecode\u003c/b\u003e is program code that has been compiled from source code into\n    a lower level language that can be understood by an interpreter.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"threads-and-processes","name":"Threads And Processes","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Sitting right at the intersection of software and hardware, the topic of this video will give you a glimpse into how these two worlds collide.","video":{"vimeoId":"614634344","duration":14,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299595867-05cc1da034e223413fcea5650696849086b85005a356865b3_640x360?r=pad"},"questions":[{"uid":"43634608","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"57634672","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"23242185","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nwith open(\"awesome_people.txt\", \"w\") as file:\n    file.write(\"Tim\\n\")\n    file.write(\"Antoine\\n\")\n    file.write(\"Clement\")\n\nawesome_people = open(\"awesome_people.txt\", \"r\").read().split(\"\\n\")\nprint(awesome_people)","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Thread","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n    A \u003cstrong\u003ethread\u003c/strong\u003e is a flow of execution of your program. By default,\n    Python will run your program in a single thread, the \u003cstrong\u003emain\u003c/strong\u003e \n    thread, which will execute your Python code line by line. \n\u003c/p\u003e\n\u003cp\u003e\n    When trying to speed up certain programs using \u003cstrong\u003econcurrency\u003c/strong\u003e,\n    many programs choose to run multiple threads at the same time. The \n    \u003cspan\u003ethreading\u003c/span\u003e package that comes pre-installed contains functions\n    and classes that allow you to create new threads and coordinate them.\n\u003c/p\u003e\n\u003cp\u003e\n    The most important elements of this library are: \u003cspan\u003eThread\u003c/span\u003e and \n    \u003cspan\u003eLock\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Process","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A \u003cb\u003eprocess\u003c/b\u003e is an application or program that is running on your\n    computer. Processes are allocated their own memory space and always contain\n    at least one thread, but may be split into multiple threads that are\n    executing concurrently.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Concurrency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cb\u003eConcurrency\u003c/b\u003e refers to the ability for parts of a program,\n    application or algorithm (i.e. multiple threads) to be executed\n    simultaneously.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Parallelism","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cb\u003eParallelism\u003c/b\u003e refers to several computations occuring at the same time.\n    Parallel programs utilize multiple logcial processing cores of your CPU to\n    increase speed. This is different from a concurrenct program that may only\n    utilize a single logical CPU core.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"python-global-interpreter-lock","name":"Python Global Interpreter Lock","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"In this lesson, we'll examine how a single design decision about its architecture has made Python unique among most other programming languages.","video":{"vimeoId":"647355159","duration":9,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1303466209-00c1b33906be4e2a4321be2cd7113e3b806de18e0e9dc9961_640x360?r=pad"},"questions":[{"uid":"39436638","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nwith open(\"awesome_people.txt\", \"w\") as file:\n    file.write(\"Tim\\n\")\n    file.write(\"Antoine\\n\")\n    file.write(\"Clement\")\n\nawesome_people = open(\"awesome_people.txt\", \"r\").read().split(\"\\n\")\nprint(awesome_people)","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Mutex","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A \u003cb\u003emutex\u003c/b\u003e is a \u003cb\u003emutually exclusive lock\u003c/b\u003e that controls the access\n    to a section of code. Mutex's are typically used in multi-threaded programs\n    when a section of code should only be executed by one thread at a time. If\n    one thread has aquired the mutex all other threads must wait until that\n    thread releases it before they can execute that locked section of code.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"threads","name":"Threads","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"The last few videos have been more conversational and high-level in nature than the norm. Now, it's time to roll up our sleeves and get back into the weeds of things by taking a deeper look at how Python threading works in practice. Let's dive in!","video":{"vimeoId":"619008216","duration":37,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299594573-e6df0d4c6a850cbe0ea95d785776178871b8d4702e7d31a3e_640x360?r=pad"},"questions":[{"uid":"35969524","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"threading-1","type":"CODING_STANDARD","name":"Starting Threads","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0},{"uid":"53582435","type":"CODING_STANDARD","name":"Powers Of Two Multi-Threaded","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"advancedProgrammingAssessments","difficulty":1},{"uid":"53532435","type":"CODING_STANDARD","name":"Foo Bar Multi-threaded","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"advancedProgrammingAssessments","difficulty":1}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nimport random\nimport time\nimport threading\n\n\ndef loop(thread_name, n):\n    for i in range(n):\n        # Sleep for up to 20 milliseconds.\n        time.sleep(random.randint(1, 20) / 1000)\n        print(f\"Thread {thread_name}: {i}\")\n\n\n# TODO: As an exercise, try to change this code to let\n# t1 finish first before t2 starts running. (Hint: A\n# mutex lock should do the trick)\nt1 = threading.Thread(target=loop, args=(\"t1\", 10))\nt2 = threading.Thread(target=loop, args=(\"t2\", 10))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Thread","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n\u003cp\u003e\n    A \u003cstrong\u003ethread\u003c/strong\u003e is a flow of execution of your program. By default,\n    Python will run your program in a single thread, the \u003cstrong\u003emain\u003c/strong\u003e \n    thread, which will execute your Python code line by line. \n\u003c/p\u003e\n\u003cp\u003e\n    When trying to speed up certain programs using \u003cstrong\u003econcurrency\u003c/strong\u003e,\n    many programs choose to run multiple threads at the same time. The \n    \u003cspan\u003ethreading\u003c/span\u003e package that comes pre-installed contains functions\n    and classes that allow you to create new threads and coordinate them.\n\u003c/p\u003e\n\u003cp\u003e\n    The most important elements of this library are: \u003cspan\u003eThread\u003c/span\u003e and \n    \u003cspan\u003eLock\u003c/span\u003e.\n\u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Concurrency","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cb\u003eConcurrency\u003c/b\u003e refers to the ability for parts of a program,\n    application or algorithm (i.e. multiple threads) to be executed\n    simultaneously.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]},{"name":"Mutex","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    A \u003cb\u003emutex\u003c/b\u003e is a \u003cb\u003emutually exclusive lock\u003c/b\u003e that controls the access\n    to a section of code. Mutex's are typically used in multi-threaded programs\n    when a section of code should only be executed by one thread at a time. If\n    one thread has aquired the mutex all other threads must wait until that\n    thread releases it before they can execute that locked section of code.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"asynchronous-programming","name":"Asynchronous Programming","module":null,"releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Ever been on a phone call while cooking some food in the kitchen, with a game or TV show running in the background? Well, in the same way that humans can perform multiple tasks simultaneously, so too can Python! Indeed, asynchronous programming is our favorite language's version of multitasking.","video":{"vimeoId":"641149787","duration":31,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299595434-e415af7425f76d746f3053027899e4bf6b8303d868e4f9224_640x360?r=pad"},"questions":[{"uid":"81279650","type":"MCQ","name":"Question 1","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"15210522","type":"MCQ","name":"Question 2","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"31284175","type":"MCQ","name":"Question 3","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"","category":null,"difficulty":null},{"uid":"async-1","type":"CODING_STANDARD","name":"Add One Asynchronous","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0},{"uid":"async-2","type":"CODING_STANDARD","name":"Asynchronous Concurrency","releaseDate":"2021-05-24T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"","difficulty":0}],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Python playground!\n\nimport asyncio\nimport time\n\n\n# Here we fake the download of a large file by sleeping 1 second.\nasync def download_large_file(file_name):\n    await asyncio.sleep(1)\n    print(f\"{file_name} was downloaded successfully\")\n    return f\"{file_name}: OK\"\n\n\n# These are the files to download. Since each file takes 1 second\n# to download, it would take 5 seconds without using asyncio.\nFILES_TO_DOWNLOAD = [\n    \"textures.zip\",\n    \"models.zip\",\n    \"physics_engine.exe\",\n    \"game.exe\",\n    \"achievements.exe\",\n]\n\n\nasync def main():\n    start_time = time.time()\n    downloads = [download_large_file(file_name) for file_name in FILES_TO_DOWNLOAD]\n    download_statuses = await asyncio.gather(*downloads)\n    total_time = time.time() - start_time\n    print(f\"Finished downloading {len(download_statuses)} files in {total_time} seconds!\")\n\n\nasyncio.run(main())","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false}],"assessment":{"uid":"advanced-programming-assessment","name":"Advanced Programming Assessment","questions":[{"uid":"53047096","type":"CODING_STANDARD","name":"Positive Even Squares","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"advancedProgrammingAssessments","difficulty":1},{"uid":"9856990","type":"CODING_STANDARD","name":"Integer Sum","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"advancedProgrammingAssessments","difficulty":1},{"uid":"63420020","type":"CODING_STANDARD","name":"Generate String","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"advancedProgrammingAssessments","difficulty":1},{"uid":"51532435","type":"CODING_STANDARD","name":"Thread Safe Counter","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"advancedProgrammingAssessments","difficulty":1},{"uid":"52532435","type":"CODING_STANDARD","name":"Asynchronous Fetcher","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"instructor":"Tim Ruscica","category":"advancedProgrammingAssessments","difficulty":1}]}}
