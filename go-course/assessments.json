{"uid":"programming-with-go-programming-assessment","name":"Programming With Go Assessment","questions":[{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"","changelog":[],"customInputVars":[],"difficulty":0,"hints":[],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["go"],"name":"Keep Longest And Shortest Word","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a function that accepts a pointer to a 2-dimensional slice of\n    \u003cspan\u003estring\u003c/span\u003e slices. Your function should modify this slice in-place\n    so, each nested slice only contains their longest and shortest word. In\n    other words, remove all elements from each nested slice that is\n    \u003cstrong\u003enot\u003c/strong\u003e\n    the longest or shortest word contained within it. Your function should not\n    return a value, it should simply modify the input slice.\n  \u003c/p\u003e\n  \u003cp\u003e\n    You may assume each nested slice will only contain words with unique lengths\n    (i.e., no two words have the same length). If a slice only contains one\n    word, that word is considered both the longest and the shortest word and\n    should remain in the slice. If a slice contains no words, then no change is\n    necessary.\n  \u003c/p\u003e\n  \u003cp\u003e\n    Note: The remaining words should maintain the order in which they appear in\n    the original slice.\n  \u003c/p\u003e\n  \u003ch3\u003eSample Input\u003c/h3\u003e\n  \u003cpre\u003e\u003cspan class=\"CodeEditor-promptParameter\"\u003ewords\u003c/span\u003e = \u0026amp;[][]string{ {\"best\", \"course\", \"yes\"}, {\"hello\"}, {\"a\", \"ab\", \"abc\", \"abcd\"}, {} }\u003c/pre\u003e\n  \u003ch3\u003eSample Output\u003c/h3\u003e\n  \u003cpre\u003e[[course yes] [hello] [a abcd] []]\u003cspan class=\"CodeEditor-promptComment\"\u003e// These are the values of the slices after the function has ran, not the return value\u003c/span\u003e\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"2021-05-24T00:00:00Z","resources":{"go":{"language":"go","sandboxCode":"// This suite of tests is written to run against your code\n// so that we can check its correctness.\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\twordSlices := [][]string{{\"best\", \"course\", \"yes\"}, {\"hello\"}, {\"a\", \"ab\", \"abc\", \"abcd\"}, {}}\n\texpected := [][]string{{\"course\", \"yes\"}, {\"hello\"}, {\"a\", \"abcd\"}, {}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\twordSlices := [][]string{{\"a\"}, {\"\"}, {\"abcd\", \"ad\", \"a\"}, {\"1234\", \"testing\", \"yes\", \"ok\", \"small\"}}\n\texpected := [][]string{{\"a\"}, {\"\"}, {\"abcd\", \"a\"}, {\"testing\", \"ok\"}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\twordSlices := [][]string{}\n\texpected := [][]string{}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\twordSlices := [][]string{{\"cat\", \"mouse\", \"bear\"}}\n\texpected := [][]string{{\"cat\", \"mouse\"}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\twordSlices := [][]string{{\"a\", \"bb\", \"\", \"ccc\", \"DDDD\"}}\n\texpected := [][]string{{\"\", \"DDDD\"}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\twordSlices := [][]string{{\"a\", \"bb\", \"\", \"ccc\", \"DDDD\"}, {\"\", \"a\"}, {}}\n\texpected := [][]string{{\"\", \"DDDD\"}, {\"\", \"a\"}, {}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n","solutions":["// Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nfunc keepLongestAndShortestWordHelper(words []string) []string {\n\tif len(words) == 0 {\n\t\treturn words\n\t}\n\n\tlongest := words[0]\n\tshortest := words[0]\n\tlongestIdx := 0\n\tshortestIdx := 0\n\n\tfor idx, word := range words {\n\t\tif len(word) \u003e len(longest) {\n\t\t\tlongest = word\n\t\t\tlongestIdx = idx\n\t\t}\n\t\tif len(word) \u003c len(shortest) {\n\t\t\tshortest = word\n\t\t\tshortestIdx = idx\n\t\t}\n\t}\n\n\tif longest == shortest {\n\t\treturn []string{longest}\n\t} else if longestIdx \u003e shortestIdx {\n\t\treturn []string{shortest, longest}\n\t} else {\n\t\treturn []string{longest, shortest}\n\t}\n}\n\nfunc KeepLongestAndShortestWord(wordSlices *[][]string) {\n\tfor wordsIdx, words := range *wordSlices {\n\t\tnewWords := keepLongestAndShortestWordHelper(words)\n\t\t(*wordSlices)[wordsIdx] = newWords\n\t}\n}\n"],"solutionsDisabled":false,"startingCode":"package main\n\nfunc KeepLongestAndShortestWord(wordSlices *[][]string) {\n\t// Write your code here.\n}\n","unitTests":"package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\twordSlices := [][]string{{\"best\", \"course\", \"yes\"}, {\"hello\"}, {\"a\", \"ab\", \"abc\", \"abcd\"}, {}}\n\texpected := [][]string{{\"course\", \"yes\"}, {\"hello\"}, {\"a\", \"abcd\"}, {}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\twordSlices := [][]string{{\"a\"}, {\"\"}, {\"abcd\", \"ad\", \"a\"}, {\"1234\", \"testing\", \"yes\", \"ok\", \"small\"}}\n\texpected := [][]string{{\"a\"}, {\"\"}, {\"abcd\", \"a\"}, {\"testing\", \"ok\"}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\twordSlices := [][]string{}\n\texpected := [][]string{}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\twordSlices := [][]string{{\"cat\", \"mouse\", \"bear\"}}\n\texpected := [][]string{{\"cat\", \"mouse\"}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\twordSlices := [][]string{{\"a\", \"bb\", \"\", \"ccc\", \"DDDD\"}}\n\texpected := [][]string{{\"\", \"DDDD\"}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\twordSlices := [][]string{{\"a\", \"bb\", \"\", \"ccc\", \"DDDD\"}, {\"\", \"a\"}, {}}\n\texpected := [][]string{{\"\", \"DDDD\"}, {\"\", \"a\"}, {}}\n\tKeepLongestAndShortestWord(\u0026wordSlices)\n\trequire.Equal(t, expected, wordSlices)\n}\n"}},"spaceTime":"","submissionStatistics":{"correctCount":125,"failureCount":713},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"42296100","version":0,"video":{"annotations":[],"codeWalkthroughTime":263,"duration":0,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"680150407"},"visualization":{"inputType":null,"outputType":null}},"difficulty":0,"instructor":"Tim Ruscica","name":"Keep Longest And Shortest Word","releaseDate":"2021-05-24T00:00:00Z","type":"CODING_STANDARD","uid":"42296100"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"","changelog":[],"customInputVars":[],"difficulty":0,"hints":[],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["go"],"name":"Library Books","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003eWrite the following structs and their corresponding methods:\u003c/p\u003e\n  \u003cp\u003e\n    \u003cspan\u003eBook\u003c/span\u003e: a struct that has four fields: an \u003cspan\u003eint\u003c/span\u003e\n    \u003cspan\u003eid\u003c/span\u003e, \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e,\n    \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003eauthor\u003c/span\u003e, and \u003cspan\u003eint\u003c/span\u003e\n    \u003cspan\u003equantity\u003c/span\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n    \u003cspan\u003eLibrary\u003c/span\u003e: a struct that one field named \u003cspan\u003ebooks\u003c/span\u003e which\n    is a \u003cspan\u003eslice\u003c/span\u003e of pointer to the \u003cspan\u003eBook\u003c/span\u003e struct.\n    \u003cspan\u003eLibrary\u003c/span\u003e should also contain the following two methods.\n  \u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cspan\u003eCheckoutBook(id int)\u003c/span\u003e: a method that returns a pointer to a\n      \u003cspan\u003eBook\u003c/span\u003e whose \u003cspan\u003eid\u003c/span\u003e field matches the\n      \u003cspan\u003eid\u003c/span\u003e parameter, as well as a \u003cspan\u003ebool\u003c/span\u003e indicating\n      whether the book can be checked out. A book can only be checked out if it\n      has at least one copy remaining and exists in the library. If the book\n      exists and has at least one copy you should first decrement it's number of\n      copies by one and then return the pointer to it along with the\n      \u003cspan\u003ebool\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e. If the book does not exist or has\n      insufficient copies the method should return \u003cspan\u003enil\u003c/span\u003e and\n      \u003cspan\u003efalse\u003c/span\u003e.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cspan\u003eReturnBook(id int)\u003c/span\u003e: a method that returns a boolean\n      indicating if the book corresponding with the \u003cspan\u003eid\u003c/span\u003e parameter\n      can be returned. A book can only be returned if it exists in the library,\n      if it does not your method should return \u003cspan\u003efalse\u003c/span\u003e. If the book\n      does exist, you should increment it's number of copies before returning\n      \u003cspan\u003etrue\u003c/span\u003e.\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cp\u003e\n    For all test cases you may assume each book has a unique \u003cspan\u003eid\u003c/span\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n    Please note that a book that exists in the library can be returned even if\n    it hasn't been checked out.\n  \u003c/p\u003e\n\u003c/div\u003e","releaseDate":"2021-05-24T00:00:00Z","resources":{"go":{"language":"go","sandboxCode":"// This suite of tests is written to run against your code\n// so that we can check its correctness.\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tbooks := []*Book{\u0026Book{1, \"Programming For Dummies\", \"Jason Bourne\", 2}, \u0026Book{2, \"Routines Explained\", \"Billy Cyrus\", 1}, \u0026Book{3, \"Anger Management\", \"Micheal Scott\", 0}}\n\tlibrary := Library{books}\n\tbook, ok := library.CheckoutBook(1)\n\trequire.Equal(t, books[0], book)\n\trequire.Equal(t, true, ok)\n\n\tvar nilBook *Book = nil\n\tbook2, ok2 := library.CheckoutBook(4)\n\trequire.Equal(t, nilBook, book2)\n\trequire.Equal(t, false, ok2)\n\n\tok3 := library.ReturnBook(2)\n\trequire.Equal(t, true, ok3)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tbooks := []*Book{\u0026Book{1, \"Programming For Dummies\", \"Jason Bourne\", 2}}\n\tlibrary := Library{books}\n\n\tbook, ok := library.CheckoutBook(1)\n\trequire.Equal(t, books[0], book)\n\trequire.Equal(t, true, ok)\n\n\tbook2, ok2 := library.CheckoutBook(1)\n\trequire.Equal(t, books[0], book2)\n\trequire.Equal(t, true, ok2)\n\n\tvar nilBook *Book = nil\n\tbook3, ok3 := library.CheckoutBook(1)\n\trequire.Equal(t, nilBook, book3)\n\trequire.Equal(t, false, ok3)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tbooks := []*Book{\u0026Book{1, \"Programming For Dummies\", \"Jason Bourne\", 2}, \u0026Book{2, \"Routines Explained\", \"Billy Cyrus\", 1}, \u0026Book{3, \"Anger Management\", \"Micheal Scott\", 0}}\n\tlibrary := Library{books}\n\n\tvar nilBook *Book = nil\n\tbook, ok := library.CheckoutBook(3)\n\trequire.Equal(t, nilBook, book)\n\trequire.Equal(t, false, ok)\n\n\tok2 := library.ReturnBook(4)\n\trequire.Equal(t, false, ok2)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tbooks := []*Book{\u0026Book{1, \"Programming For Dummies\", \"Jason Bourne\", 2}, \u0026Book{2, \"Routines Explained\", \"Billy Cyrus\", 1}, \u0026Book{3, \"Anger Management\", \"Micheal Scott\", 0}}\n\tlibrary := Library{books}\n\n\tok := library.ReturnBook(3)\n\trequire.Equal(t, true, ok)\n\n\tbook, ok2 := library.CheckoutBook(3)\n\trequire.Equal(t, books[2], book)\n\trequire.Equal(t, true, ok2)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tbooks := []*Book{}\n\tlibrary := Library{books}\n\n\tok := library.ReturnBook(1)\n\trequire.Equal(t, false, ok)\n\n\tvar nilBook *Book = nil\n\tbook, ok2 := library.CheckoutBook(2)\n\trequire.Equal(t, nilBook, book)\n\trequire.Equal(t, false, ok2)\n}\n","solutions":["// Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype Book struct {\n\tid     int\n\ttitle  string\n\tauthor string\n\tcopies int\n}\ntype Library struct {\n\tbooks []*Book\n}\n\nfunc (l *Library) findBook(id int) *Book {\n\tfor _, book := range l.books {\n\t\tif book.id == id {\n\t\t\treturn book\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (l *Library) CheckoutBook(id int) (*Book, bool) {\n\tbook := l.findBook(id)\n\n\tif book == nil || book.copies \u003c 1 {\n\t\treturn nil, false\n\t}\n\n\tbook.copies -= 1\n\treturn book, true\n}\n\nfunc (l *Library) ReturnBook(id int) bool {\n\tbook := l.findBook(id)\n\n\tif book != nil {\n\t\tbook.copies += 1\n\t\treturn true\n\t}\n\n\treturn false\n}\n","// Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype Book struct {\n\tid     int\n\ttitle  string\n\tauthor string\n\tcopies int\n}\n\ntype Library struct {\n\tbooks []*Book\n}\n\nfunc (l *Library) CheckoutBook(id int) (*Book, bool) {\n\tfor _, book := range l.books {\n\t\tif book.id == id \u0026\u0026 book.copies \u003e= 1 {\n\t\t\tbook.copies -= 1\n\t\t\treturn book, true\n\t\t}\n\t}\n\n\treturn nil, false\n}\n\nfunc (l *Library) ReturnBook(id int) bool {\n\tfor _, book := range l.books {\n\t\tif book.id == id {\n\t\t\tbook.copies += 1\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"],"solutionsDisabled":false,"startingCode":"package main\n\n// Write your code here.\n","unitTests":"package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tbooks := []*Book{\u0026Book{1, \"Programming For Dummies\", \"Jason Bourne\", 2}, \u0026Book{2, \"Routines Explained\", \"Billy Cyrus\", 1}, \u0026Book{3, \"Anger Management\", \"Micheal Scott\", 0}}\n\tlibrary := Library{books}\n\tbook, ok := library.CheckoutBook(1)\n\trequire.Equal(t, books[0], book)\n\trequire.Equal(t, true, ok)\n\n\tvar nilBook *Book = nil\n\tbook2, ok2 := library.CheckoutBook(4)\n\trequire.Equal(t, nilBook, book2)\n\trequire.Equal(t, false, ok2)\n\n\tok3 := library.ReturnBook(2)\n\trequire.Equal(t, true, ok3)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tbooks := []*Book{\u0026Book{1, \"Programming For Dummies\", \"Jason Bourne\", 2}}\n\tlibrary := Library{books}\n\n\tbook, ok := library.CheckoutBook(1)\n\trequire.Equal(t, books[0], book)\n\trequire.Equal(t, true, ok)\n\n\tbook2, ok2 := library.CheckoutBook(1)\n\trequire.Equal(t, books[0], book2)\n\trequire.Equal(t, true, ok2)\n\n\tvar nilBook *Book = nil\n\tbook3, ok3 := library.CheckoutBook(1)\n\trequire.Equal(t, nilBook, book3)\n\trequire.Equal(t, false, ok3)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tbooks := []*Book{\u0026Book{1, \"Programming For Dummies\", \"Jason Bourne\", 2}, \u0026Book{2, \"Routines Explained\", \"Billy Cyrus\", 1}, \u0026Book{3, \"Anger Management\", \"Micheal Scott\", 0}}\n\tlibrary := Library{books}\n\n\tvar nilBook *Book = nil\n\tbook, ok := library.CheckoutBook(3)\n\trequire.Equal(t, nilBook, book)\n\trequire.Equal(t, false, ok)\n\n\tok2 := library.ReturnBook(4)\n\trequire.Equal(t, false, ok2)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tbooks := []*Book{\u0026Book{1, \"Programming For Dummies\", \"Jason Bourne\", 2}, \u0026Book{2, \"Routines Explained\", \"Billy Cyrus\", 1}, \u0026Book{3, \"Anger Management\", \"Micheal Scott\", 0}}\n\tlibrary := Library{books}\n\n\tok := library.ReturnBook(3)\n\trequire.Equal(t, true, ok)\n\n\tbook, ok2 := library.CheckoutBook(3)\n\trequire.Equal(t, books[2], book)\n\trequire.Equal(t, true, ok2)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tbooks := []*Book{}\n\tlibrary := Library{books}\n\n\tok := library.ReturnBook(1)\n\trequire.Equal(t, false, ok)\n\n\tvar nilBook *Book = nil\n\tbook, ok2 := library.CheckoutBook(2)\n\trequire.Equal(t, nilBook, book)\n\trequire.Equal(t, false, ok2)\n}\n"}},"spaceTime":"","submissionStatistics":{"correctCount":120,"failureCount":326},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"91697651","version":0,"video":{"annotations":[],"codeWalkthroughTime":263,"duration":0,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"680150459"},"visualization":{"inputType":null,"outputType":null}},"difficulty":0,"instructor":"Tim Ruscica","name":"Library Books","releaseDate":"2021-05-24T00:00:00Z","type":"CODING_STANDARD","uid":"91697651"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"","changelog":[],"customInputVars":[],"difficulty":0,"hints":[],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["go"],"name":"Magic Squares","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a function that determines if a two-dimensional slice of distinct\n    positive integers representing a \u003cem\u003emagic square\u003c/em\u003e. In this context, a\n    magic square is a square slice where all numbers aligned horizontally,\n    vertically and diagonally sum to the same value.\n  \u003c/p\u003e\n  \u003cp\u003eTake this square (2-dimensional) slice as an example:\u003c/p\u003e\n  \u003cpre\u003e\n      -------------\n      | 2 | 7 | 6 |  15\n      -------------\n      | 9 | 5 | 1 |  15\n      -------------\n      | 4 | 3 | 8 |  15\n      ------------- \n    15  15  15  15  15 \n  \u003c/pre\u003e\n  \u003cp\u003e\n    As you can see each horizontal line, vertical line, and diagonal line all sum\n    to the same value (the extra two \u003cspan\u003e15\u003c/span\u003e's in the bottom are for the\n    two diagonals).\n  \u003c/p\u003e\n  \u003cp\u003e\n    You may assume that the given square slice will always contain distinct,\n    positive integers (excluding zeros) and that the minimum size of the square\n    will be three (i.e., a width of three and height of three). You may also\n    assume the dimensions of the slice will always be the same (i.e., it will be\n    square).\n  \u003c/p\u003e\n  \u003cp\u003e\n    Note: Make sure to consider the case where the size of the square is greater\n    than three. In this case you do NOT need to check more than two diagonals.\n  \u003c/p\u003e\n\u003ch3\u003eSample Input #1\u003c/h3\u003e\n\u003cpre\u003e\u003cspan class=\"CodeEditor-promptParameter\"\u003esquare\u003c/span\u003e = [][]int{ {5, 6, 19, 68}, {69, 18, 3, 8}, {4, 7, 70, 17}, {20, 67, 6, 5} }\n\u003c/pre\u003e\n\u003ch3\u003eSample Output #1\u003c/h3\u003e\n\u003cpre\u003etrue\u003cspan class=\"CodeEditor-promptComment\"\u003e // all lines sum to 98\u003c/span\u003e\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"2021-05-24T00:00:00Z","resources":{"go":{"language":"go","sandboxCode":"// This suite of tests is written to run against your code\n// so that we can check its correctness.\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tsquare := [][]int{\n\t\t{5, 6, 19, 68},\n\t\t{69, 18, 3, 8},\n\t\t{4, 7, 70, 17},\n\t\t{20, 67, 6, 5},\n\t}\n\texpected := true\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tsquare := [][]int{\n\t\t{2, 7, 6},\n\t\t{9, 5, 1},\n\t\t{4, 3, 8},\n\t}\n\texpected := true\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tsquare := [][]int{\n\t\t{10, 3, 8},\n\t\t{5, 7, 9},\n\t\t{6, 11, 4},\n\t}\n\texpected := true\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tsquare := [][]int{\n\t\t{5, 6, 19, 68},\n\t\t{69, 18, 3, 8},\n\t\t{4, 7, 70, 17},\n\t\t{20, 67, 6, 100},\n\t}\n\texpected := false\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tsquare := [][]int{\n\t\t{17, 24, 1, 8, 15},\n\t\t{23, 5, 7, 14, 16},\n\t\t{4, 6, 13, 20, 22},\n\t\t{10, 12, 19, 21, 3},\n\t\t{11, 18, 25, 2, 9},\n\t}\n\texpected := true\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tsquare := [][]int{\n\t\t{8, 20, 21, 2, 14},\n\t\t{18, 9, 3, 11, 24},\n\t\t{17, 19, 13, 15, 1},\n\t\t{6, 7, 23, 25, 4},\n\t\t{16, 10, 5, 12, 22},\n\t}\n\texpected := false\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n","solutions":["// Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\npackage main\n\nfunc sumSlice(nums []int) (sum int) {\n\tfor _, num := range nums {\n\t\tsum += num\n\t}\n\treturn\n}\n\nfunc DetectMagicSquare(square [][]int) bool {\n\tdesiredSum := sumSlice(square[0])\n\tcolumnSums := make([]int, len(square))\n\tdiagonalLeftRightSum := 0\n\tdiagonalRightLeftSum := 0\n\n\tfor row, rowNums := range square {\n\t\trowSum := 0\n\n\t\tfor col, num := range rowNums {\n\t\t\trowSum += num\n\t\t\tcolumnSums[col] += num\n\n\t\t\tif row == col {\n\t\t\t\tdiagonalLeftRightSum += num\n\t\t\t}\n\t\t\tif col == len(square)-1-row {\n\t\t\t\tdiagonalRightLeftSum += num\n\t\t\t}\n\n\t\t\tif row == len(square)-1 \u0026\u0026 columnSums[col] != desiredSum {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\tif rowSum != desiredSum {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn diagonalRightLeftSum == desiredSum \u0026\u0026 diagonalLeftRightSum == desiredSum\n}\n"],"solutionsDisabled":false,"startingCode":"package main\n\nfunc DetectMagicSquare(square [][]int) bool {\n\t// Write your code here.\n\treturn false\n}\n","unitTests":"package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tsquare := [][]int{\n\t\t{5, 6, 19, 68},\n\t\t{69, 18, 3, 8},\n\t\t{4, 7, 70, 17},\n\t\t{20, 67, 6, 5},\n\t}\n\texpected := true\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tsquare := [][]int{\n\t\t{2, 7, 6},\n\t\t{9, 5, 1},\n\t\t{4, 3, 8},\n\t}\n\texpected := true\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tsquare := [][]int{\n\t\t{10, 3, 8},\n\t\t{5, 7, 9},\n\t\t{6, 11, 4},\n\t}\n\texpected := true\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tsquare := [][]int{\n\t\t{5, 6, 19, 68},\n\t\t{69, 18, 3, 8},\n\t\t{4, 7, 70, 17},\n\t\t{20, 67, 6, 100},\n\t}\n\texpected := false\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tsquare := [][]int{\n\t\t{17, 24, 1, 8, 15},\n\t\t{23, 5, 7, 14, 16},\n\t\t{4, 6, 13, 20, 22},\n\t\t{10, 12, 19, 21, 3},\n\t\t{11, 18, 25, 2, 9},\n\t}\n\texpected := true\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tsquare := [][]int{\n\t\t{8, 20, 21, 2, 14},\n\t\t{18, 9, 3, 11, 24},\n\t\t{17, 19, 13, 15, 1},\n\t\t{6, 7, 23, 25, 4},\n\t\t{16, 10, 5, 12, 22},\n\t}\n\texpected := false\n\tactual := DetectMagicSquare(square)\n\trequire.Equal(t, expected, actual)\n}\n"}},"spaceTime":"","submissionStatistics":{"correctCount":120,"failureCount":235},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"32006702","version":0,"video":{"annotations":[],"codeWalkthroughTime":263,"duration":0,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"680150483"},"visualization":{"inputType":null,"outputType":null}},"difficulty":0,"instructor":"Tim Ruscica","name":"Magic Squares","releaseDate":"2021-05-24T00:00:00Z","type":"CODING_STANDARD","uid":"32006702"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"","changelog":[],"customInputVars":[],"difficulty":0,"hints":[],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["go"],"name":"Multiply Strings Concurrently","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    Write a function that concurrently multiplies strings by a given factor.\n    This function needs to accept a slice of \u003cspan\u003estrings\u003c/span\u003e and a positive (possibly\n    zero), integer \u003cspan\u003efactor\u003c/span\u003e and return a new slice containing the resulting\n    multiplied strings.\n  \u003c/p\u003e\n  \u003cp\u003e\n    The multiplication of a string is simply the repeated concatenation of\n    itself. For example, multiplying \u003cspan\u003e\"tim\"\u003c/span\u003e by\n    \u003cspan\u003e3\u003c/span\u003e results in \u003cspan\u003e\"timtimtim\"\u003c/span\u003e.\n  \u003c/p\u003e\n  \u003cp\u003e\n    The slice that is returned must contain the multiplied strings in the order\n    in which they appeared in the original input slice. This function must also\n    perform each string multiplication concurrently, using a go routine.\n  \u003c/p\u003e\n  \u003cp\u003eNote: Multiplying a string by zero results in an empty string: \u003cspan\u003e\"\"\u003c/span\u003e.\u003c/p\u003e\n\u003ch3\u003eSample Input\u003c/h3\u003e\n\u003cpre\u003e\n\u003cspan class=\"CodeEditor-promptParameter\"\u003estrings\u003c/span\u003e = []string{\"bird\", \"plane\", \"superman\"}  \n\u003cspan class=\"CodeEditor-promptParameter\"\u003efactor\u003c/span\u003e = 3  \n\u003c/pre\u003e\n\u003ch3\u003eSample Output\u003c/h3\u003e\n\u003cpre\u003e[birdbirdbird planeplaneplane supermansupermansuperman]\u003c/pre\u003e\n\u003c/div\u003e","releaseDate":"2021-05-24T00:00:00Z","resources":{"go":{"language":"go","sandboxCode":"// This suite of tests is written to run against your code\n// so that we can check its correctness.\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tstrings := []string{\"bird\", \"plane\", \"superman\"}\n\tfactor := uint(3)\n\texpected := []string{\"birdbirdbird\", \"planeplaneplane\", \"supermansupermansuperman\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tstrings := []string{\"bird\", \"plane\", \"superman\"}\n\tfactor := uint(0)\n\texpected := []string{\"\", \"\", \"\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tstrings := []string{\"a\", \"bc\", \"de\"}\n\tfactor := uint(2)\n\texpected := []string{\"aa\", \"bcbc\", \"dede\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tstrings := []string{\"a\", \"longer string\", \"a really long string that should take longer to multiply\"}\n\tfactor := uint(100)\n\texpected := []string{\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"longer stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger string\", \"a really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiply\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tstrings := []string{\"pilot\", \"flight\", \"jet\"}\n\tfactor := uint(500)\n\texpected := []string{\"pilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilot\", \"flightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflight\", \"jetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjet\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tstrings := []string{\"a\", \"simple\", \"test\", \"case\"}\n\tfactor := uint(1)\n\texpected := []string{\"a\", \"simple\", \"test\", \"case\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\tstrings := []string{}\n\tfactor := uint(0)\n\texpected := []string{}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n","solutions":["// Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype MultiplyStringResult struct {\n\tstr string\n\tidx int\n}\n\nfunc multiplyString(str string, factor uint, idx int, result chan\u003c- MultiplyStringResult) {\n\tnewString := \"\"\n\n\tfor i := uint(0); i \u003c factor; i++ {\n\t\tnewString = newString + str\n\t}\n\n\tresultStruct := MultiplyStringResult{newString, idx}\n\tresult \u003c- resultStruct\n}\n\nfunc MultiplyStringsConcurrently(strings []string, factor uint) []string {\n\tmultipliedStrings := make([]string, len(strings))\n\tresultsChannel := make(chan MultiplyStringResult)\n\n\tfor idx, str := range strings {\n\t\tgo multiplyString(str, factor, idx, resultsChannel)\n\t}\n\n\tresultsGathered := 0\n\tfor resultsGathered \u003c len(strings) {\n\t\tmultipliedString := \u003c-resultsChannel\n\t\tresultsGathered++\n\t\tmultipliedStrings[multipliedString.idx] = multipliedString.str\n\t}\n\n\treturn multipliedStrings\n}\n"],"solutionsDisabled":false,"startingCode":"package main\n\nfunc MultiplyStringsConcurrently(strings []string, factor uint) []string {\n\t// Write your code here.\n\treturn []string{}\n}\n","unitTests":"package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tstrings := []string{\"bird\", \"plane\", \"superman\"}\n\tfactor := uint(3)\n\texpected := []string{\"birdbirdbird\", \"planeplaneplane\", \"supermansupermansuperman\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tstrings := []string{\"bird\", \"plane\", \"superman\"}\n\tfactor := uint(0)\n\texpected := []string{\"\", \"\", \"\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tstrings := []string{\"a\", \"bc\", \"de\"}\n\tfactor := uint(2)\n\texpected := []string{\"aa\", \"bcbc\", \"dede\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tstrings := []string{\"a\", \"longer string\", \"a really long string that should take longer to multiply\"}\n\tfactor := uint(100)\n\texpected := []string{\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"longer stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger stringlonger string\", \"a really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiplya really long string that should take longer to multiply\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tstrings := []string{\"pilot\", \"flight\", \"jet\"}\n\tfactor := uint(500)\n\texpected := []string{\"pilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilotpilot\", \"flightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflightflight\", \"jetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjetjet\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tstrings := []string{\"a\", \"simple\", \"test\", \"case\"}\n\tfactor := uint(1)\n\texpected := []string{\"a\", \"simple\", \"test\", \"case\"}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\tstrings := []string{}\n\tfactor := uint(0)\n\texpected := []string{}\n\tactual := MultiplyStringsConcurrently(strings, factor)\n\trequire.Equal(t, expected, actual)\n}\n"}},"spaceTime":"","submissionStatistics":{"correctCount":116,"failureCount":335},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"8689712","version":0,"video":{"annotations":[],"codeWalkthroughTime":263,"duration":0,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"680150557"},"visualization":{"inputType":null,"outputType":null}},"difficulty":0,"instructor":"Tim Ruscica","name":"Multiply Strings Concurrently","releaseDate":"2021-05-24T00:00:00Z","type":"CODING_STANDARD","uid":"8689712"},{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"category":"","contents":{"acl":{"isAvailable":true,"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"]},"assessmentSummary":null,"category":"","changelog":[],"customInputVars":[],"difficulty":0,"hints":[],"isLongOutput":false,"isSlowExecution":false,"jsonTests":[],"languagesSupported":["go"],"name":"Item Interface","notes":"","prompt":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003eWrite the following interface, structs and methods as defined below.\u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cspan\u003eItem\u003c/span\u003e: an interface that defines a single method:\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003cspan\u003eGetPrice() float64\u003c/span\u003e: a method that returns a float\n          representing the price of an item.\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cspan\u003eGravel\u003c/span\u003e: a struct that implements the\n      \u003cspan\u003eItem\u003c/span\u003e interface and has the following fields:\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003cspan\u003elbs\u003c/span\u003e: a \u003cspan\u003efloat64\u003c/span\u003e value representing the\n          quantity of gravel.\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003cspan\u003epricePerLb\u003c/span\u003e: a \u003cspan\u003efloat64\u003c/span\u003e value representing the\n          price per lb of gravel.\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003cspan\u003egrade\u003c/span\u003e: a \u003cspan\u003estring\u003c/span\u003e value representing the grade\n          of the gravel. The possible values for this are \u003cspan\u003e\"fine\"\u003c/span\u003e,\n          \u003cspan\u003e\"medium\"\u003c/span\u003e and \u003cspan\u003e\"coarse\"\u003c/span\u003e.\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cspan\u003eShovel\u003c/span\u003e: a struct that implements the\n      \u003cspan\u003eItem\u003c/span\u003e interface and has the following fields:\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003cspan\u003esize\u003c/span\u003e: a \u003cspan\u003estring\u003c/span\u003e value representing the size\n          of the shovel. The possible values are \u003cspan\u003e\"S\"\u003c/span\u003e,\n          \u003cspan\u003e\"M\"\u003c/span\u003e and \u003cspan\u003e\"L\"\u003c/span\u003e.\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003cspan\u003eprice\u003c/span\u003e: the price of a shovel of the specified\n          \u003cspan\u003esize\u003c/span\u003e.\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n  \u003cp\u003e\n    After writing the types and methods specified above complete the\n    \u003cspan\u003eCalculateOrderPrice\u003c/span\u003e function. This function accepts a slice of\n    \u003cspan\u003eItem\u003c/span\u003e's (representing a users order) and returns the total price\n    of the order (i.e., the sum of the price of all the items).\n  \u003c/p\u003e\n\u003c/div\u003e","releaseDate":"2021-05-24T00:00:00Z","resources":{"go":{"language":"go","sandboxCode":"// This suite of tests is written to run against your code\n// so that we can check its correctness.\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\titems := []Item{\n\t\t\u0026Gravel{4.0, 10.5, \"fine\"},\n\t\t\u0026Shovel{\"S\", 25.0},\n\t\t\u0026Gravel{3.0, 12.0, \"coarse\"},\n\t\t\u0026Shovel{\"M\", 35.0},\n\t}\n\texpected := 138.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\titems := []Item{}\n\texpected := 0.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\titems := []Item{\n\t\t\u0026Gravel{5.0, 10.5, \"fine\"}, \n\t\t\u0026Gravel{6.0, 10.0, \"coarse\"}, \n\t\t\u0026Gravel{2.0, 35.0, \"medium\"},\n\t}\n\texpected := 182.5\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\titems := []Item{\n\t\t\u0026Shovel{\"S\", 10.0}, \n\t\t\u0026Shovel{\"M\", 20.0}, \n\t\t\u0026Shovel{\"L\", 30.0}, \n\t\t\u0026Gravel{100.0, 12.65, \"fine\"},\n\t}\n\texpected := 1325.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\titems := []Item{\u0026Gravel{5.0, 10.5, \"fine\"}}\n\texpected := 52.5\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\titems := []Item{\u0026Gravel{5.0, 0, \"fine\"}}\n\texpected := 0.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\titems := []Item{\u0026Gravel{0, 14.24, \"fine\"}}\n\texpected := 0.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n","solutions":["// Copyright Â© 2022 AlgoExpert LLC. All rights reserved.\n\npackage main\n\ntype Item interface {\n\tGetPrice() float64\n}\n\ntype Gravel struct {\n\tlbs        float64\n\tpricePerLb float64\n\tgrade      string\n}\n\ntype Shovel struct {\n\tsize  string\n\tprice float64\n}\n\nfunc (g *Gravel) GetPrice() float64 {\n\treturn g.lbs * g.pricePerLb\n}\n\nfunc (s *Shovel) GetPrice() float64 {\n\treturn s.price\n}\n\nfunc CalculateOrderPrice(order []Item) float64 {\n\ttotalPrice := 0.0\n\n\tfor _, item := range order {\n\t\ttotalPrice += item.GetPrice()\n\t}\n\n\treturn totalPrice\n}\n"],"solutionsDisabled":false,"startingCode":"package main\n\n// Write your code here.\n\nfunc CalculateOrderPrice(order []Item) float64 {\n\t// Write your code here.\n\treturn 0.0\n}\n","unitTests":"package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\titems := []Item{\n\t\t\u0026Gravel{4.0, 10.5, \"fine\"},\n\t\t\u0026Shovel{\"S\", 25.0},\n\t\t\u0026Gravel{3.0, 12.0, \"coarse\"},\n\t\t\u0026Shovel{\"M\", 35.0},\n\t}\n\texpected := 138.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\titems := []Item{}\n\texpected := 0.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\titems := []Item{\n\t\t\u0026Gravel{5.0, 10.5, \"fine\"}, \n\t\t\u0026Gravel{6.0, 10.0, \"coarse\"}, \n\t\t\u0026Gravel{2.0, 35.0, \"medium\"},\n\t}\n\texpected := 182.5\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\titems := []Item{\n\t\t\u0026Shovel{\"S\", 10.0}, \n\t\t\u0026Shovel{\"M\", 20.0}, \n\t\t\u0026Shovel{\"L\", 30.0}, \n\t\t\u0026Gravel{100.0, 12.65, \"fine\"},\n\t}\n\texpected := 1325.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\titems := []Item{\u0026Gravel{5.0, 10.5, \"fine\"}}\n\texpected := 52.5\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\titems := []Item{\u0026Gravel{5.0, 0, \"fine\"}}\n\texpected := 0.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\titems := []Item{\u0026Gravel{0, 14.24, \"fine\"}}\n\texpected := 0.0\n\tactual := CalculateOrderPrice(items)\n\trequire.Equal(t, expected, actual)\n}\n"}},"spaceTime":"","submissionStatistics":{"correctCount":122,"failureCount":53},"testStrategy":"SANDBOX_ONLY","tests":[],"uid":"69270354","version":0,"video":{"annotations":[],"codeWalkthroughTime":263,"duration":0,"instructor":"Tim Ruscica","overviewTime":0,"vimeoId":"680151174"},"visualization":{"inputType":null,"outputType":null}},"difficulty":0,"instructor":"Tim Ruscica","name":"Item Interface","releaseDate":"2021-05-24T00:00:00Z","type":"CODING_STANDARD","uid":"69270354"}]}
