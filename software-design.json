{"name":"Software Design","lessons":[{"uid":"divide-and-conquer","name":"Divide And Conquer","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"United we stand,\nDivided we fall.\nSo divide you we shall,\nAnd then conquer you all.","video":{"vimeoId":"629359138","duration":4,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299576934-dcecaffd1b0fa0f61002ccb887be7196dd9520b466d28182c_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"cohesion","name":"Cohesion","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Cohesion leads to harmony, and harmony leads to good things. It's as simple as that!\n","video":{"vimeoId":"629360656","duration":14,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299577299-4f4567e13126b3a63d925ba42c9233fef1aca97f06aa71ed3_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Cohesion","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cb\u003eCohesion\u003c/b\u003e refers to the degree to which things grouped together are\n    similar. Usually, when programming, you would like to increase cohesion.\n    There are many different types of cohesion:\n  \u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cb\u003eFunctional:\u003c/b\u003e facilities are kept together that perform only one\n      computation with no side effects.\n    \u003c/li\u003e\n    \u003cli\u003e\u003cb\u003eLayer:\u003c/b\u003e related services are kept together.\u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eCommunicational:\u003c/b\u003e facilities for operating on the same data are kept\n      together.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eSequential:\u003c/b\u003e a set of procedures, which work in sequence to perform\n      some computation are kept together.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eProcedural:\u003c/b\u003e a set of procedures, which are called one after another\n      are kept together.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eTemporal:\u003c/b\u003e procedures used in the same general phase of execution\n      like initialization and cleanup are kept together.\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eUtility:\u003c/b\u003e related utilities are kept together (when there is no way\n      to group using strong cohesion).\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"coupling","name":"Coupling","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Coupling in software engineering is kind of like codependency in romantic relationshipsâ€”try to avoid or minimize it as much as possible!","video":{"vimeoId":"629364692","duration":10,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299576834-8fa1ab19e48592b1bcade03d1f434fbaba3aba19322841481_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Coupling","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cb\u003eCoupling\u003c/b\u003e refers to the degree of interdependence between things. In\n    programming, it is typically desirable to reduce coupling. There are many\n    different types of coupling:\n  \u003c/p\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cb\u003eContent:\u003c/b\u003e a component secretly modifies the internal data of another\n      component.\n    \u003c/li\u003e\n    \u003cli\u003e\u003cb\u003eStamp:\u003c/b\u003e an argument type of a method is an application class.\u003c/li\u003e\n    \u003cli\u003e\u003cb\u003eRoutine Call:\u003c/b\u003e A routine calling another routine.\u003c/li\u003e\n    \u003cli\u003e\u003cb\u003eType Use:\u003c/b\u003e Use of globally defined data types.\u003c/li\u003e\n    \u003cli\u003e\u003cb\u003eInclusion/Import:\u003c/b\u003e importing unnecessary components.\u003c/li\u003e\n    \u003cli\u003e\n      \u003cb\u003eExternal:\u003c/b\u003e a dependency on something outside of the scope of the\n      system like an operating system, shared library, hardware etc.\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"abstraction","name":"Abstraction","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"They say the devil is in the details; so let's exorcise it away, by abstracting it away.","video":{"vimeoId":"629364921","duration":3,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299577528-35d5d02ee77fd0cb2f0da00405e06d05e7d1f4e6cd40d78f5_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"reusability","name":"Reusability","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Something that is reusable is something that provides repeated value. This is obviously good. Make your code reusable; your future self will thank you.","video":{"vimeoId":"629364962","duration":3,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299576713-eb920509771d949e8675ee0bade1ec3bfa3e53a7e24715a19_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"reuse","name":"Reuse","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"No, we're not reusing the previous video for this lesson.","video":{"vimeoId":"629365071","duration":2,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299576345-8a8ade3a58568d782f0e31fe571edc321700d3fd1c0a9cc87_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"flexibility","name":"Flexibility","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Is flexible code nimble and adaptable? Yes.\n\nWill it win any Olympics medals in gymnastics? That's a bit of a stretch...   \n","video":{"vimeoId":"629373076","duration":7,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299577937-4f2574d02228ad32bd891cd590a50f7985c52200a132efe97_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"obsolescence","name":"Obsolescence","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"It's always sad to see things become obsolete. If you're not careful, your code and your programs could end up going the way of \u003cs\u003ePHP and Ruby on Rails\u003c/s\u003e the dodo.\n","video":{"vimeoId":"629384007","duration":11,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299577056-31cec8f055c3c41f7cbb0021ef510ff3a48462516e982b33b_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Obsolescence","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    \u003cb\u003eObsolescence\u003c/b\u003e refers to the process of becoming obsolete. In\n    programming, something may become obsolete if it is no longer maintained,\n    supported, documented or becomes outdated. It is desirable to avoid\n    obsolescence when choosing libraries, languages, hardware and other\n    technologies to be used in an application or project.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"portability","name":"Portability","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Strive to make your code as portable in cyberspace as the laptop you're writing it on is in real space.\n","video":{"vimeoId":"629384392","duration":2,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299577192-34c59c472dec35d47a3ac97fb5bcc5aae8257b203719c1935_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[{"name":"Portability","section":null,"definition":"\u003cdiv class=\"html\"\u003e\n  \u003cp\u003e\n    In programming, \u003cb\u003eportability\u003c/b\u003e refers to the ability of software to be\n    transferred from one machine, system, operating system or platform to\n    another. When creating software it is best practice to design for\n    portability.\n  \u003c/p\u003e\n\u003c/div\u003e","url":null,"kinds":[]}],"section":"","hasCodeExample":false},{"uid":"testability","name":"Testability","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"If you're constantly writing new code to test the new code you just wrote, then it's time to automate!\n","video":{"vimeoId":"629385254","duration":3,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1299577406-325ab15fd6d1c66cd3ea0b2c2472b13954aa2d0de1057849a_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false},{"uid":"defensibility","name":"Defensibility","module":"Design Principles","releaseDate":"0001-01-01T00:00:00Z","acl":{"isFree":false,"isFreeForStudents":false,"productRequired":["programmingexpert"],"isAvailable":true},"description":"Murphy's Law infamously notes that \"Anything that can go wrong will go wrong.\"\n\nBut as Benjamin Franklin once astutely remarked, \"An ounce of prevention is worth a pound of cure.\"\n\nDo you see where we're going with this? Think like Ben. Be like Ben.\n","video":{"vimeoId":"629392089","duration":4,"annotations":[],"instructor":"Tim Ruscica","thumbnail":"https://i.vimeocdn.com/video/1310558308-f52b49f1c1d232c8c02aa45affb08ad65c1badf781085995b_640x360?r=pad"},"questions":[],"references":[],"codeExample":{"runtime":"python","arguments":["main.py"],"files":[{"name":"main.py","contents":"# Welcome to our Playground!\n\nprint(\"Hello World!\")","mode":420,"isEditable":true}],"reactConfig":null},"links":[],"preReqs":[],"keyTerms":[],"section":"","hasCodeExample":false}],"assessment":{"uid":"","name":"","questions":[]}}
