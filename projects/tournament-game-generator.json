{
    "uid": "tournament-game-generator",
    "name": "Tournament Game Generator",
    "acl": {
        "isFree": false,
        "isFreeForStudents": false,
        "productRequired": [
            "programmingexpert"
        ],
        "isAvailable": true
    },
    "isPromptPublic": false,
    "prompt": "<div class=\"html\">\n  <p>\n    For this project you will be asked to create a program that can schedule\n    games that teams will play in an end of year tournament. You will only be\n    responsible for determining the games played in the first round of the\n    tournament.\n  </p>\n  <p>\n    You will first need to ask the user of your program to input the number of\n    teams; you may assume there will always be an even number of teams (you\n    don't need to validate this). Next you will need to ask for the names of all\n    of the teams and store them in some way.\n  </p>\n  <p>\n    After this you'll need to determine the number of games that were played by\n    each team; you may assume each team plays the same number of games. Finally,\n    you'll need to determine the number of wins each team had during the regular\n    season.\n  </p>\n  <p>\n    When asking for user input, you'll need to make sure all input is valid and\n    ask the user to try again if they give you invalid input. You may assume\n    user input will always be the correct type (i.e. if you ask for a number you\n    will always get an integer). You can determine if the input is invalid by\n    looking at the following constraints:\n  </p>\n  <ul>\n    <li>There are always at least <span>2</span> teams in the tournament.</li>\n    <li>\n      Each team plays every other team at least once in the regular season.\n    </li>\n    <li>\n      All team names contain at most <span>2</span> words and at least\n      <span>2</span> characters.\n    </li>\n    <li>\n      Each team has at minimum <span>0</span> wins and no more wins than the\n      number of games they played.\n    </li>\n  </ul>\n  <p>\n    In the first round of the tournament the teams with the most regular season\n    wins play the teams with the least regular season wins. For example, if Team\n    A has 5 wins, Team B has 4 wins, Team C has 3 wins and Team D has 2 wins\n    then Team A and Team D play each other and Team B and C play each other. If\n    teams are tied for wins and/or losses then your program can choose any\n    appropriate team.\n  </p>\n  <p>\n    Your program should output the games that should be played in the format\n    seen below. The first game outputted should contain the team with the most\n    regular season wins, the second game should contain the team with the second\n    most regular season wins, etc. The home team of each game should be the team\n    with the least wins of the two, if there is a tie in wins your program can\n    chose any appropriate team.\n  </p>\n  <p>\n    See below for the sample program execution. Your prompts and output should\n    follow the same format as seen below.\n  </p>\n  <h3>Sample Program Execution #1</h3>\n  <pre>\nEnter the number of teams in the tournament: 1\nThe minimum number of teams is 2, try again.\nEnter the number of teams in the tournament: 4\nEnter the name for team #1: Python\nEnter the name for team #2: Ruby\nEnter the name for team #3: JavaScript\nEnter the name for team #4: C\nTeam names must have at least 2 characters, try again.\nEnter the name for team #4: C Is Great\nTeam names may have at most 2 words, try again.\nEnter the name for Team #4: C#\nEnter the number of games played by each team: 2\nInvalid number of games. Each team plays each other at least once in the regular season, try again.\nEnter the number of games played by each team: 3\nEnter the number of wins Team Python had: 2 \nEnter the number of wins Team Ruby had: 1 \nEnter the number of wins Team JavaScript had: 0 \nEnter the number of wins Team C# had: -2\nThe minimum number of wins is 0, try again.\nEnter the number of wins Team C# had: 3\nGenerating the games to be played in the first round of the tournament...\nHome: JavaScript VS Away: C#\nHome: Ruby VS Away: Python</pre>\n<h3>Sample Program Execution #2</h3>\n<pre>Enter the number of teams in the tournament: 6\nEnter the name for team #1: AA\nEnter the name for team #2: BB\nEnter the name for team #3: CC\nEnter the name for team #4: DD\nEnter the name for team #5: EE\nEnter the name for team #6: FF\nEnter the number of games played by each team: 2\nInvalid number of games. Each team plays each other at least once in the regular season, try again.\nEnter the number of games played by each team: 6\nEnter the number of wins Team AA had: 1 \nEnter the number of wins Team BB had: 4 \nEnter the number of wins Team CC had: 3 \nEnter the number of wins Team DD had: 4 \nEnter the number of wins Team EE had: 2 \nEnter the number of wins Team FF had: 7 \nThe maximum number of wins is 6, try again.\nEnter the number of wins Team FF had: 5 \nGenerating the games to be played in the first round of the tournament...\nHome: AA VS Away: FF\nHome: EE VS Away: BB\nHome: CC VS Away: DD</pre>\n<p>The games generated from this example could also be the following:</p>\n<pre>Home: AA VS Away: FF\nHome: EE VS Away: DD\nHome: CC VS Away: BB</pre>\n</div>",
    "promptVideo": {
        "vimeoId": "646097598",
        "duration": 10,
        "annotations": [],
        "instructor": "Tim",
        "thumbnail": ""
    },
    "solutionVideo": {
        "vimeoId": "646103713",
        "duration": 15,
        "annotations": [],
        "instructor": "Tim",
        "thumbnail": ""
    },
    "solutionGithubUrl": "https://github.com/algoexpert-io/tournament-game-generator",
    "templateZip": "UEsDBBQAAAAIAACImhMUcmmXQwEAADgCAAAsAAAAdG91cm5hbWVudC1nYW1lLWdlbmVyYXRvci10ZW1wbGF0ZS9oaW50Mi50eHR9kTtrw0AQhHv9isEpYoNRkdKQNqQMtiGlOUsraeN7iHtg9O+ze7JJl0LoHrsz382eJ04Y2BK64LNhn2Awsc/IARPZGUsouId4Q/C6jphj+KEut03zqXUvb4fmeyKP0eSJIvsR8sddpYYQQaabkMk4cIYzC65UhYdi1aOLZDKJqeWUnxBVpMyWEsKArXZfvHG0r7K7tjkr9l3ElK4zXlwS2wUpxFzttSXhuuiG40pT0hOu1brtDo7yFHoIpR5QL0dD8V3m4Fuc2HekBq/WileNpKkGqywSCW4PsuRIbtmvb50N1xQenZ6o14eWRLXrRot+EmkPE8dSey3f9JbT4cGmaVxyuOhmr/XvT7Admj/ef8paHGmgqNZquzlJiWBtIKkmmaXgfsUwRuOc0n4U3xtlMbaOzYVIUiNLZ1RPx78GqC7tL1BLAwQUAAAACAAAiJoTU+/JW40BAAD8AgAALAAAAHRvdXJuYW1lbnQtZ2FtZS1nZW5lcmF0b3ItdGVtcGxhdGUvaGludDMudHh0bVLBbtswDL3rKx7Sw1agC5p0pwHDgK2H7bTDciuCgXWYSKslGRK9NH8/0qqDLR1g2KT0/B75yI0PFfvQM7qchEKqIPiQBJLhuR9wyiOOuTwhJ4sLhpJ/cSdL574a7uruA9z31LHdvvnNqLkI7yCeIUyx4vFkSShIY3zkgrzH0YSMuaOEKlQEXWGSkA44UOS6dPfZErH69KGKGuKgdWoUSTrfbpuG8omfspirNPbz0RngLOuZZgSlqcqEwsOL9j4XUN/rSVQvJglrYYkNPal0Aj/TVMXRc9E3w3nSnt833M3cfEhaZ8dpZxS57LTrswumrZa5Bv3ZPPqIh8UmHLjUxQ0Wn5lacJ/7QTud4h+eeVhs4cyglf7x9m+Gh3er7Sz/cnK7vQaucIkyO80Jn2MzZyJcvyZcXxKuttfOfUttKLMTZ4tJtO0dP+N2dvbi/A6JbTEyhp5Oumem+w9WZyKugVfTRYvX//txiS80baSu72HUYeRRtKejwTiOPQm3QsdqQyA4+2rBNuM+5+HTH1BLAwQUAAAACAAAiJoTDUnl2xgBAAATAgAALAAAAHRvdXJuYW1lbnQtZ2FtZS1nZW5lcmF0b3ItdGVtcGxhdGUvaGludDEudHh0XVFLTsQwDN33FJbYokpsOQEHQEIsQ+pOTFO7SpypenuchDASO8t5X+c9UIaVIoIXVkecwUEgVlCBgPGASwqckjYQrnOCI8k3ep2n6a3inl5eYfoIyHB3kRanxDcoGRMQH0U7n2IERlyqqr2ZxxmqaRQ5wPECG6INeatkDdgFDIysNjgWW6bqUHAqrBQrioZHNte8EubGtSZZk3XRDFI0EpsxcXuz8PuhM7TAN1QdhopuB3a7adQ82Uuy8S/8NNIf0fl/+e1otCDIautVUls+W5nGHjwf0G/9RKRXw+Ed09WMZ/g0qHfcBTUkKbcw1Vxc9i9rbuIVmEeP4dPCNjHnQy9hV+wbajdz3bR1qzIPwbP+9q/eo878A1BLAwQUAAAACAAAiJoTuZOPWQ8BAABzAgAAPwAAAHRvdXJuYW1lbnQtZ2FtZS1nZW5lcmF0b3ItdGVtcGxhdGUvdG91cm5hbWVudF9nYW1lX2dlbmVyYXRvci5weYWQwWrDMBBE7/qKJbk4UPwBhZ5L74UejWKv7YV4JbSrFP99V06IXeq2Aukgzcxq3hE+EinCHHKCNnQIIyasneuwhwG14TydMTWhbxT9JNXp2YGt6EXcqipvDfsJpTLDTbqvXPOGIm/ixc/Y/eda8j+JpVonPcE24bvvCG8KJMBBgbFFEZ9m0ABZEHRE6DO3SoEFbAQxduDP4Yo1vJf+4G0LTfEyLzwsz7wjXiIMdN3SkjDZoSm3mouPO4gpXMmevN37pMQDxECstXuUhJd9tm5td5fsgnXb4j+yfuHqHgy30X8zdS4m+3l1eEXG5Jcuhd4iKkjOCPdfEN+4UhKFFLKBCP1ypQarhBuBuj6c3BdQSwECFAMUAAAACAAAiJoTFHJpl0MBAAA4AgAALAAAAAAAAAAAAAAApIEAAAAAdG91cm5hbWVudC1nYW1lLWdlbmVyYXRvci10ZW1wbGF0ZS9oaW50Mi50eHRQSwECFAMUAAAACAAAiJoTU+/JW40BAAD8AgAALAAAAAAAAAAAAAAApIGNAQAAdG91cm5hbWVudC1nYW1lLWdlbmVyYXRvci10ZW1wbGF0ZS9oaW50My50eHRQSwECFAMUAAAACAAAiJoTDUnl2xgBAAATAgAALAAAAAAAAAAAAAAApIFkAwAAdG91cm5hbWVudC1nYW1lLWdlbmVyYXRvci10ZW1wbGF0ZS9oaW50MS50eHRQSwECFAMUAAAACAAAiJoTuZOPWQ8BAABzAgAAPwAAAAAAAAAAAAAApIHGBAAAdG91cm5hbWVudC1nYW1lLWdlbmVyYXRvci10ZW1wbGF0ZS90b3VybmFtZW50X2dhbWVfZ2VuZXJhdG9yLnB5UEsFBgAAAAAEAAQAewEAADIGAAAAAA==",
    "solutionZip": "UEsDBBQAAAAIAACImhPA6gjX3gIAAHwJAAA1AAAAdG91cm5hbWVudC1nYW1lLWdlbmVyYXRvci1zb2x1dGlvbi9zb2x1dGlvbl9zY3JpcHQucHmtVU2PmzAQvfMrRukF1DS7m2O0u1IPq7bnVr1EEXLCkFgLNjJms1GU/15/ATaQ3RyKlEiYmfeeZ+bZGeawR5myptyiSHmeSiRlHSerCNRzPNAC4Y9o0L7rR4XaIHgCymRMWdXIePbCJAqQBwSLBTwHG0aZWZa8EYyUyOQKZkkSdYA09zCfn2DZc+lnK5C89tGV0KSzPwqxpIyWTTkmrGE5BylOQPaEssXMkQmUSkJPFkVR5vav31Otro67z64G/Se14fXGQuVcAM3e9d4EYXscZV2rXoBoKqirl/vl0x80vg6DL2dN8xUeLrpqAYymPHKRaV0FsriDXdRVQVWNwjJ7pbZZz8NK++XV3HbTJTnBgbwhEAklryUsweQPKuyDYKGIAkkJPN7I1iiGlq5AYvh2ByLIThXoY9IaxwyD6embuSBVhSzzJAZD0gd6U9K7ZK+/pFVBTpiNej/Vdz/BGSfszHUXmVRwqdsTINkdjL6xjwIWZaXeV9/g4RZb/WJvpKDZkH0BLy2pEVJbEVwJFX2jONth63aB+6YgAmr1hbMP3OhLHhrySFndN0g13w/27akDB+40WqnfyM+N6WD6Uy2fbIgJMzN71ugXNa/ZatJsJvI5kH3NBKNlsxF7zpH3wTlncNUxd/aRL5850mQ9wv11H04eqi3Z/X8xn0ZrvWd6OzcEyYT99Lo3EjXuOMtSKrGM9Z8bAJehV9YPagAi/4KavNui4Ei/evxHA8/edAJE/jzeOMhR5Or/AxkKIinbm4mzxpccttja37krp0L5TfCGZebaC67XxUJ3p+ZCYtYVwr7GnZo5vOLpaVBWu+W0IlTp2beOslolT0vyiu6u8dGTu7tlFGnPmWxVi/5aDHJdww5cRRl7trIszrpN36zvNyaSHMlpMjI419RvlBnsox23dcc876E3idXugrX0IHmgeR6IckFR76F89lOFruDcZVzg72/4rpLUYpd7UR36B1BLAQIUAxQAAAAIAACImhPA6gjX3gIAAHwJAAA1AAAAAAAAAAAAAACkgQAAAAB0b3VybmFtZW50LWdhbWUtZ2VuZXJhdG9yLXNvbHV0aW9uL3NvbHV0aW9uX3NjcmlwdC5weVBLBQYAAAAAAQABAGMAAAAxAwAAAAA="
}